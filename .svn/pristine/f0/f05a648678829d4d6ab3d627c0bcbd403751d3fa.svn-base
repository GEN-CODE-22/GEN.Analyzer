using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using GENAnalizerWebETY;
using GENAnalizerWebBLL;

using GEN.DAL.NH;
using GEN.DAL.NH.Connection;
using NHibernate;

using System.Configuration;
using Newtonsoft.Json;

namespace GENAnalizerWeb.Controllers
{
    public class HomeController : Controller
    {
        #region[--ACCION RESULTS--]
        public ActionResult Index()
        {
            return View();
        }
        public ActionResult MapaGeneral()
        {
            ViewBag.Srv = GetSesServ();
            ViewBag.Usr = GetSesUrs();
            return View();
        }
        public ActionResult Impresion()
        {


            ViewBag.Srv = GetSesServ();
            ViewBag.Usr = GetSesUrs();
            return View();
        }
        public ActionResult Analizer_app()
        {
            ViewBag.Srv = GetSesServ();
            ViewBag.Usr = GetSesUrs();
            return View();
        }

        public ActionResult Tiempos()
        {
            ViewBag.Srv = GetSesServ();
            ViewBag.Usr = GetSesUrs();
            return View();
        }

        public ActionResult Clientes()
        {
            ViewBag.Srv = GetSesServ();
            ViewBag.Usr = GetSesUrs();
            return View();
        }
        public ActionResult logeos()
        {
            ViewBag.Srv = GetSesServ();
            ViewBag.Usr = GetSesUrs();
            return View();
        }

        public ActionResult Estaciones()
        {
            ViewBag.Srv = GetSesServ();
            ViewBag.Usr = GetSesUrs();
            return View();
        }
        #endregion


        #region[--METODOS--]

        [HttpPost]
        public ActionResult getGeocercas(clParametros id)
        {
            clConexionBLL connector = new clConexionBLL();
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                //UnitOfWorkNH u = new UnitOfWorkNH("DSN=Nietocde;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();
               
                return Json(conexion.getGeocercasBLL(sqldir, id));

            }
            catch (Exception ex)
            {
                throw new Exception("error", ex);
            }
        }

        [HttpPost]
        public ActionResult userLogin(clParametros id)
        {           
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();
                String serv = conexion.userLoginBLL(sqldir, id);
                if (!serv.Equals("0"))
                {
                    Session["DSN"] = serv;
                    Session["usr"] = id.paramUsr;

                    // crear las cookies
                    HttpCookie servCookie = new HttpCookie("servCookie", serv);
                    servCookie.Expires = DateTime.Now.AddMinutes(360.0);
                    ControllerContext.HttpContext.Response.SetCookie(servCookie);
                    HttpCookie usrCookie = new HttpCookie("usrCookie", id.paramUsr);
                    usrCookie.Expires = DateTime.Now.AddMinutes(360.0);
                    ControllerContext.HttpContext.Response.SetCookie(usrCookie);


                    using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\log\LoginAnlizer.txt", true))
                    {
                        file.WriteLine(string.Format("Ingreso de sesion: fecha  {0}  usuario {1} servidor {2}", DateTime.Now, id.paramUsr, serv));
                    }
                }
               
                return Json(serv);
            }
            catch (Exception ex)
            {
                throw new Exception("error", ex);
            }
        }

        [HttpPost]
        public ActionResult getNotas(clParametros id)
        {
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();              
                return Json(conexion.getNotasBLL(sqldir, id));
            }
            catch (Exception ex)
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\log\LogAnr.txt", true))
                {
                    file.WriteLine(string.Format("Generado al consultar las notas de: {2}{0}{1}", DateTime.Now, ex,id.paramSrv));
                }
                throw new Exception(string.Format("respuesta: {0}{1}", ex.Message, DateTime.Now));
               // throw new Exception("error", ex);
            }
        }
        [HttpPost]
        public ActionResult getNotasCarb(clParametros id)
        {
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();
                return Json(conexion.getNotasCarbBLL(sqldir, id));
            }
            catch (Exception ex)
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\log\LogAnr.txt", true))
                {
                    file.WriteLine(string.Format("Generado al consultar las notas de carburacion de: {2}{0}{1}", DateTime.Now, ex, id.paramSrv));
                }
                throw new Exception(string.Format("respuesta: {0}{1}", ex.Message, DateTime.Now));
                // throw new Exception("error", ex);
            }
        }
        [HttpPost]
        public ActionResult getNotasCte(clParametros id)
        {
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();
                return Json(conexion.getNotasCteBLL(sqldir, id));
            }
            catch (Exception ex)
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\log\LogAnr.txt", true))
                {
                    file.WriteLine(string.Format("Generado al consultar las notas de: {2}{0}{1}", DateTime.Now, ex, id.paramSrv));
                }
                throw new Exception(string.Format("respuesta: {0}{1}", ex.Message, DateTime.Now));
                // throw new Exception("error", ex);
            }
        }
        [HttpPost]
        public ActionResult getLiquidas(clParametros id)
        {
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();
                return Json(conexion.getLiquidasBLL(sqldir, id));
            }
            catch (Exception ex)
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\log\LogAnr.txt", true))
                {
                    file.WriteLine(string.Format("Generado al consultar las Liquidas de: {2}{0}{1}", DateTime.Now, ex, id.paramSrv));
                }
                throw new Exception(string.Format("respuesta: {0}{1}", ex.Message, DateTime.Now));
                // throw new Exception("error", ex);
            }
        }
        [HttpPost]
        public ActionResult getUltimaDiaCopiado(clParametros id)
        {
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();
                return Json(conexion.geUltimaFechaCopiadoBLL(sqldir, id));
            }
            catch (Exception ex)
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\log\LogAnr.txt", true))
                {
                    file.WriteLine(string.Format("Generado al consultar el ultimo dia copiado de: {2}{0}{1}", DateTime.Now, ex, id.paramSrv));
                }
                throw new Exception(string.Format("respuesta: {0}{1}", ex.Message, DateTime.Now));
                // throw new Exception("error", ex);
            }
        }
        public ActionResult infoApp(clParametros id)
        {
            try
            {
                //UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                //ISession s = u._sessionFactory.OpenSession();
                // clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clsConexionUbicoBLL conexion = new clsConexionUbicoBLL();
                return Json(conexion.infoAppCliente());
            }
            catch (Exception ex)
            {
                throw new Exception("error", ex);
            }
        }
        public ActionResult infoPedidosClientes(clParametros id)
        {
            try
            {
                
                clsConexionUbicoBLL conexion = new clsConexionUbicoBLL();
                return Json(conexion.infoPedidosClienteBLL(id.paramString1));
            }
            catch (Exception ex)
            {
                throw new Exception("error", ex);
            }
        }
        [HttpPost]
        public ActionResult getColonias(clParametros id)
        {
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();
                return Json(conexion.getColoniaBLL(sqldir, id));
            }
            catch (Exception ex)
            {
                throw new Exception("error", ex);
            }
        }
        //obtiene los municipios
        [HttpPost]
        public ActionResult getMunicipios(clParametros id)
        {
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();
                return Json(conexion.getMunicipiosBLL(sqldir, id));
            }
            catch (Exception ex)
            {
                throw new Exception("error", ex);
            }
        }
        public ActionResult getEstadosIndex(clParametros id)
        {
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();
                return Json(conexion.getEstadosIndexBLL(sqldir, id));
            }
            catch (Exception ex)
            {
                throw new Exception("error", ex);
            }
        }
        // guarda un poligono libre en la base de datos 
        [HttpPost]
        public ActionResult savePoligon(clGeocercas id)
        {
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();
                return Json(conexion.saveFreePoligonBLL(sqldir, id));
            }
            catch (Exception ex)
            {
                throw new Exception("error", ex);
            }
        }
        // obtiene los poligonos libres dibujados por los usuarios
        [HttpPost]
        public ActionResult getPilogonosLibres(clGeocercas id)
        {
            clConexionBLL connector = new clConexionBLL();
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                //UnitOfWorkNH u = new UnitOfWorkNH("DSN=Nietocde;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();

                return Json(conexion.getPoligonosLibresBLL(sqldir, id));

            }
            catch (Exception ex)
            {
                throw new Exception("error", ex);
            }
        }
        [HttpPost]
        public ActionResult deletePologonosLibres(clGeocercas id)
        {
            clConexionBLL connector = new clConexionBLL();
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                //UnitOfWorkNH u = new UnitOfWorkNH("DSN=Nietocde;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();

                return Json(conexion.deleteFreePoligonBLL(sqldir, id));

            }
            catch (Exception ex)
            {
                throw new Exception("error", ex);
            }
        }
        //obtiene las colonias por municipio
        public ActionResult getColXMun(clsColoniaGeo id)
        {
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();
                return Json(conexion.getColoniaXmunBLL(sqldir, id));
            }
            catch (Exception ex)
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\log\AnlizerErrors.txt", true))
                {
                    file.WriteLine(string.Format("ERROR : Fecha  {0}  Error: {1} Metodo{2}", DateTime.Now, ex.Message, "getColXMun"));
                }
                throw;
            }
        }
        // obtiene un listado de los los usuarios de la base de datos 
        [HttpPost]
        public ActionResult getUsrs(clParametros id)
        {
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();
                return Json(conexion.getUsrsBLL(sqldir, id));
            }
            catch (Exception ex)
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\log\ErrAnr.txt", true))
                {
                    file.WriteLine(string.Format("Generado al consultar los usuarios: {2}{0}", DateTime.Now, ex));
                }
                throw new Exception(string.Format("respuesta: {0}{1}", ex.Message, DateTime.Now));
                // throw new Exception("error", ex);
            }
        }

        // obtiene los inicios de secion de los usuarios 
        [HttpPost]
        public ActionResult getUsrsLogin(clParametros id)
        {
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();
                return Json(conexion.getUsrsLoginBLL(sqldir, id));
            }
            catch (Exception ex)
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\log\ErrAnr.txt", true))
                {
                    file.WriteLine(string.Format("Generado al consultar los inicios de sesion usuarios: {2}{0}", DateTime.Now, ex));
                }
                throw new Exception(string.Format("respuesta: {0}{1}", ex.Message, DateTime.Now));
                // throw new Exception("error", ex);
            }
        }
        [HttpPost]
        public ActionResult getUsrsLoginGfr(clParametros id)
        {
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();
                return Json(conexion.getUsrsLoginGrfBLL(sqldir, id));
            }
            catch (Exception ex)
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\log\ErrAnr.txt", true))
                {
                    file.WriteLine(string.Format("Generado al consultar los inicios de sesion usuarios: {2}{0}", DateTime.Now, ex));
                }
                throw new Exception(string.Format("respuesta: {0}{1}", ex.Message, DateTime.Now));
                // throw new Exception("error", ex);
            }
        }

        [HttpPost]
        public ActionResult userLoginAlta(clParametros id)
        {
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();
                return Json(conexion.userLoginAltaBLL(sqldir, id));
            }
            catch (Exception ex)
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\log\ErrAnr.txt", true))
                {
                    file.WriteLine(string.Format("Generado al dar de alta un usuario: {2}{0}", DateTime.Now, ex));
                }
                throw new Exception(string.Format("respuesta: {0}{1}", ex.Message, DateTime.Now));
                // throw new Exception("error", ex);
            }
        }
        [HttpPost]
        public ActionResult actualizarBajaUser(clParametros id)
        {
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();
                return Json(conexion.actualizarBajaUserBLL(sqldir, id));
            }
            catch (Exception ex)
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\log\ErrAnr.txt", true))
                {
                    file.WriteLine(string.Format("Generado actualizar/eliminar un usuario: {2}{0}", DateTime.Now, ex));
                }
                throw new Exception(string.Format("respuesta: {0}{1}", ex.Message, DateTime.Now));
                // throw new Exception("error", ex);
            }
        }

        [HttpPost]
        public ActionResult getPedidos(clParametros id)
        {
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();
                return Json(conexion.getPedidosBLL(sqldir, id));
            }
            catch (Exception ex)
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\log\LogAnr.txt", true))
                {
                    file.WriteLine(string.Format("Generado al consultar los pedidos de: {2}{0}{1}", DateTime.Now, ex, id.paramSrv));
                }
                throw new Exception(string.Format("respuesta: {0}{1}", ex.Message, DateTime.Now));
                // throw new Exception("error", ex);
            }
        }
        #endregion





        /// <summary>
        /// metodo especial para el requerimiento
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult todoslosMunicipios(clParametros id)
        {
            try
            {
                UnitOfWorkNH u = new UnitOfWorkNH("DSN=consolidacion;UID=sicogas;PWD=imponente;");
                ISession s = u._sessionFactory.OpenSession();
                clsSQLDirectosService sqldir = new clsSQLDirectosService(s);
                clConexionBLL conexion = new clConexionBLL();
                return Json(conexion.todasLasColoniasBLL(sqldir, id));
            }
            catch (Exception ex)
            {
                throw new Exception("error", ex);
            }
        }

        #region [getCooKies]
        public string GetSesUrs()
        {
            string strUsr = string.Empty;
            try
            {
                strUsr = Session["usr"].ToString();
            }
            catch (Exception ex)
            {
                var c = ControllerContext.HttpContext.Request.Cookies["usrCookie"];
                if (c != null)
                {
                    strUsr = c.Value;
                }
            }
            return strUsr;
        }

        public string GetSesServ()
        {
            string strSrv = string.Empty;
            try
            {
                strSrv = Session["DSN"].ToString();
            }
            catch (Exception ex)
            {
                var c = ControllerContext.HttpContext.Request.Cookies["servCookie"];
                if (c != null)
                {
                    strSrv = c.Value;
                }
            }
            return strSrv;
        }

        #endregion


        /// <summary>
        /// Con este método se logra que cuándo por medio de un AJAX se haga una petición y la vuelta sea tipo JSON
        /// podamos traer la máxima cantidad de datos sin restricción. 
        /// </summary>
        /// <param name="data"></param>
        /// <param name="contentType"></param>
        /// <param name="contentEncoding"></param>
        /// <param name="behavior"></param>
        /// <returns></returns>
        protected override JsonResult Json(object data, string contentType, System.Text.Encoding contentEncoding, JsonRequestBehavior behavior)
        {
            return new JsonResult()
            {
                Data = data,
                ContentType = contentType,
                ContentEncoding = contentEncoding,
                JsonRequestBehavior = behavior,
                MaxJsonLength = Int32.MaxValue
            };
        }
    }
}
