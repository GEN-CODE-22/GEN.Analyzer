@{
    ViewBag.Title = "Notas GPS";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="initial-scale=1.0">
    <title>Venta Geografica</title>

</head>



<!-- Nueva Imagen -->
<body id="page-top">
    <!-- Page Wrapper -->
    <div id="wrapper">
       
        <!-- Content Wrapper -->
        <div id="content-wrapper" class="d-flex flex-column">
            <!-- Main Content -->
            <div id="content">
                <!-- Topbar -->
                <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">
                    <center><img id="id_logo" src="~/Images/logo.png" style="width:100px; margin-top:10px;" /></center>
                   
                    <!-- Topbar Navbar -->
                    <ul class="navbar-nav ml-auto">
                        <ul class="navbar-nav ml-auto mt-2 mt-lg-0">
                            
                            <li class="nav-item dropdown">
                                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#cargaNotas">
                                    Consulta Notas
                                </button>
                             </li>
                           
                           
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown2" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    HERRAMEINTAS
                                </a>
                                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navbarDropdown2" style="width:300px">
                                    <button type="button" class="btn btn-outline-primary" data-toggle="modal" data-target="#filtrosModal" style="width:100%">
                                        Filtros
                                    </button>             
                                    <button type="button" class="btn btn-outline-primary" data-toggle="modal" data-target="#herramientas" style="width:100%">
                                        Colonias, municipios, poligonos
                                    </button>
                                    <br />
                                    <button type="button" class="btn btn-outline-primary" data-toggle="modal" data-target="#negocios" style="width:100%">
                                        INUE
                                    </button>
                                    <br />
                                    <button type="button" class="btn btn-outline-primary" data-toggle="modal" data-target="#simbologia" style="width:100%">
                                        Simbologia
                                    </button>
                                    <br />
                                    <button type="button" class="btn btn-outline-primary" data-toggle="modal" data-target="#geocercas" style="width:100%">
                                        Geocercas
                                    </button>
                                    <br />
                                    <label id="notastotales"> </label>
                                    <label id="notascongps"> </label>
                                    <label id="notassingps"></label>
                                </div>
                               
                            </li>
                           
                        </ul>
                        <div class="topbar-divider d-none d-sm-block"></div>
                        <!-- Nav Item - User Information -->
                        <li class="nav-item dropdown no-arrow">
                            <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <label id="rol" style="display:none;">@ViewBag.Rol</label>
                                <label id="serv" style="display:none;">@ViewBag.Srv</label>
                                <label id="usr" style="display:none;">@ViewBag.Usr</label>
                                <label id="rol" style="display:none;">@ViewBag.Rol</label>
                                <span class="mr-2 d-none d-lg-inline text-gray-600 small">Cia:</span>
                                <span class="mr-2 d-none d-lg-inline text-gray-600 small">@ViewBag.Cia</span>
                                <span class="mr-2 d-none d-lg-inline text-gray-600 small">Pla:</span>
                                <span class="mr-2 d-none d-lg-inline text-gray-600 small">@ViewBag.Pla</span>
                                <span class="mr-2 d-none d-lg-inline text-gray-600 small">Srv:</span>
                                <span class="mr-2 d-none d-lg-inline text-gray-600 small">@ViewBag.Srv</span>
                                <i class="far fa-user" style="margin-left:15px"></i>
                                <span class="mr-2 d-none d-lg-inline text-gray-600 small">Usuario:</span>
                                <span class="mr-2 d-none d-lg-inline text-gray-600 small" style="margin-right:10px"> @ViewBag.Usr</span>
                                <img class="img-profile rounded-circle" src="~/Images/personal.png">
                            </a>
                            <!-- Dropdown - User Information -->
                            <div class="dropdown-menu dropdown-menu-right shadow animated--grow-in" aria-labelledby="userDropdown">
                                <a class="dropdown-item" href="#">
                                    <i class="fas fa-user fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Profile
                                </a>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" href="#" data-toggle="modal" data-target="#logoutModal">
                                    <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Logout
                                </a>
                            </div>
                        </li>
                    </ul>
                </nav>
                <!-- End of Topbar -->
                <!-- Begin Page Content   <div class="container-fluid">-->
                <div class="container-fluid">
                    <div id="map" style="width: 100%; height: 100vh;"></div>
                </div>
                    <!-- End of Content Wrapper -->
                </div>
            <!-- End of Page Wrapper -->
            <!-- Scroll to Top Button-->
            <a class="scroll-to-top rounded" href="#page-top">
                <i class="fas fa-angle-up"></i>
            </a>
            <!-- Logout Modal-->
            <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">¿Seguro de Salir?</h5>
                            <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">×</span>
                            </button>
                        </div>
                        <div class="modal-body">Te saldras de todo modulo</div>
                        <div class="modal-footer">
                            <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancelar</button>
                            <button class="btn btn-danger" type="button" onclick="exitAnalizer()">Salir</button>


                        </div>
                    </div>
                </div>
            </div>
           
            <div id="geoload">
                <img src="~/Images/loadGeocercas.gif" style="display:none" />
            </div>
           

            <!-- dialogos-->
            <dialog id="buscarColonina">

                <label>Colonia</label>
                <input class="form-control" placeholder="Plabra clave" type="text" id="txtcolonia" />
                ESTADO:
                <select class="form-control" id="select_estados"></select>
                <table style="width:100%">
                    <tr>
                        <td style="width:32%"><button style="width:100%" class="btn btn-primary" onclick="buscarColonia()">           Buscar Colonia</button></td>
                        <td style="width:32%"><button style ="width:100%" class="btn btn-primary" onclick="dialogDibujarColonia()">   Colonias Consultadas</button></td>
                        <td style="width:32%"><button style="width:100%" class="btn btn-primary" onclick="quitarcolonias()" > Quitar Colonias</button></td>
                    </tr>
                    <tr>
                        <td style="width:32%"><button style="width:100%" class="btn btn-primary" onclick="buscarMunicipios()">        Buscar Municipios</button></td>
                        <td style="width:32%"><button style="width:100%"class="btn btn-primary" onclick="muestraDialogMunicipios()"> Municipios consultados</button></td>
                        <td style="width:32%"><button style="width:100%" class=" btn btn-primary" onclick="quitarMunicipios()">        Quitar Municipios</button></td>
                    </tr>
                    <tr>
                        <td><button class="btn btn-danger" onclick=" cierraDialog()">Cerra</button></td>
                        
                    </tr>
                </table>

            </dialog>

            <dialog id="resultados_Coloninas">
                <div id="tblColonias"></div>

                <button class="btn btn-danger" onclick=" cierraDialog()">cerrar</button>
                <button class="btn btn-primary" onclick="dialogBuscarColonia()">Nueva busqueda</button>
            </dialog>

            <dialog id="graficas">
                <div style="width:100%">
                    <div class="fi fi-size-sm fi-round-md fi-pdf" onclick="javascript: window.imprimirDIV('contenedor_graficas')" style="display:inline-block; width:5%">
                        <div class="fi-content">pdf</div>
                    </div>
                    <button class="btn btn-danger" onclick=" cierraDialog()" style="display:inline-block; width:10%; float:right">Cerrar</button>
                </div>
               
               
                @*<button class="btn btn-success"  id="btnToExcel" onclick="notasToExcel('notasAnalisi')"> Exportar csv/Excel</button>
                <button class="btn btn-primary" onclick="javascript: window.imprimirDIV('contenedor_graficas')">Imprimir</button>*@
                <div id="contenedor_graficas">
                    <center>
                        <label id="titulo_graficas"></label></br>
                        <!--
                <div style="float:left;width: 50%;" id="tblAnalisiGral">
                    <div style="float:left;width: 50%; "></div>
                    <div style="float:left;width: 50%; " id="tblAnalisiTipNvta"></div>
                    <br /><br />
                    <div style="float:left;width: 50%; " id="tblAnalisiTippago"></div>
                </div>-->
                        <!--divs de tablas-->
                        <div class="tablasresumen" style="width: 100%;">
                            <center>
                                <label>RESUMEN GENERAL</label>
                                <div class="tablasresumen" id="tblAnalisiGral" style="  font-size: 30px;"></div>
                            </center>
                        </div><br />
                        <div class="tablasresumen" style="width: 100%;">
                            <center>
                                <label>TIPO DE PAGO</label>
                                <div class="tablasresumen" id="tblAnalisiTippago"></div><br />
                            </center>
                        </div><br />

                        <div class="tablasresumen" style="width: 100%;">
                            <center>
                                <label>TIPO DE NOTA DE VENTA</label>
                                <div class="tablasresumen" id="tblAnalisiTipNvta"></div>
                            </center>
                        </div><br />
                        <div class="tablasresumen" style="width: 100%;">
                            <center>
                                <label>TIPO  DE PEDIDO</label>
                                <div class="tablasresumen" id="tblAnalisiTipdo"></div><br />
                            </center>
                        </div>    <br />
                        <div class="tablasresumen" style="width: 100%;">
                            <center>
                                <label>USO DE NOTA DE VENTA</label>
                                <div class="tablasresumen" id="tblAnalisisUsoNvta"></div><br />
                            </center>
                        </div>  <br />
                        <!--divs de graficas-->
                        <div style="float:left;width: 50%;" id="grfVtaTipSer"></div><br />
                        <div style="float:left;width: 50%;" id="grfTipServ"></div><br /><br />

                        <div style="float:left;width: 50%;" id="grfUsoNvta"></div><br />
                        <div style="float:left;width: 50%;" id="grfFormPed"></div><br /><br />
                        <div style="float:left;width: 50%;" id="grfAnalisisDiaSemana"></div><br /><br />
                        <div style="float:left;width: 50%;" id="grfAnalisisDiaSemanaSur"></div><br /><br />

                        <div class="tablasresumen">
                            <center>

                                <img style=" width:1000px; height: 800px; " id="prvMapa">  </img><br />
                                <h2>Imagen del poligono</h2>
                            </center>
                        </div>

                    </center>

                </div>

            </dialog>
            <dialog id="poligonosLibres">
                <input class="form-control" type="text" placeholder="Nombre del poligono a guardar" id="descPoligon" />
                <table style="width:100%">
                    <tr>
                        <td style="width:32%"><button style="width:100%" class="btn btn-primary" id="btnGrdPoligon" onclick="saveFreePoligon()">Guardar poligono</button></td>
                        <td style="width:32%"><button style="width:100%" class="btn btn-primary" id="btnBcrPoligon" onclick="getPoligonosLibres()">Consultar mis poligonos</button></td>
                        <td style="width:32%"><button style="width:100%" class="btn btn-primary" id="" onclick="PoligonosLibresConsultados()">Poligonos Consultados</button></td>
                    </tr>
                    <tr>
                        <td style="width:32%"><button style="width:100%" class="btn btn-primary" id="btnQtarPoligon" onclick="quitarPoligonoLibre()">Quitar Poligono</button></br></td>
                        <td style="width:32%"></td>
                        <td style="width:32%"></td>
                    </tr>
                    <tr>
                        <td><button class="btn btn-danger" onclick=" cierraDialog()">Cerrar</button></td>

                    </tr>
                </table>
                
                   
                    
                   
                    
                    
                    


                </div>
    </div>
            
            <dialog id="contenedorPoligonsLibres">
                <div id="tablaPoligonsLibres"></div>
                <button class="btn btn-danger" onclick=" cierraDialog()">cerrar</button>


            </dialog>

            <dialog id="contenedorMunicipios">
                <div id="tblMunicipios"></div>
                <button class="btn btn-danger" onclick=" cierraDialog()">cerrar</button>


            </dialog>

            <canvas id="canvasAux" style="display: none;"></canvas>
            <div id="tableNegocioshtml" style="display:none;"></div>

    <div class="modal fade" id="cargaNotas" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Carga de notas</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <center>
                        <label>Planta</label>
                        <select id="select_plantas" class="form-control"></select>
                        <label>Fecha Inicial</label>
                        <input type="date" class="form-control" id="fecha_ini">
                        <label>Fecha Final</label>
                        <input type="date" class="form-control" id="fecha_fin">
                        <br />
                        <div id="div_seleccion_servidores" class="card-body" style="display: none;">
                            <label>Establece servidores a consultar</label>
                            <select class="form-control" id="select_servidores"></select>
                            <button class="btn btn-primary" onclick="agregaServidor()" style="width:100%">Agregar</button>
                            <input type="text" class="form-control" id="input_servidores" />

                        </div>
                    </center>
                    <br />
                    <button id="btnInfoServer" class="btn btn-outline-primary" style="width:100%" onclick="getNotas()">Consultar Notas</button><br />
                    @*<div id="imgload">
                            <img src="~/Images/CARGANDO.gif" style="display:inline" />
                        </div>*@
                    <br />

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>

                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="filtrosModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Filtros</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body card">
                    <div id="filtros" style=" background:#ffffff">
                        <center>
                            <label>Visualizar por:</label>
                            <select id="accion" class="form-control">
                                <option value=".">PEDIDOS</option>
                                <option value="Re">RUTAS</option>
                            </select><br />
                        </center>
                        <!-- div para contener los controle de contulta por el medio del cual se realizo el pedido-->
                        <div id="div_pedidos">
                            <label>Presencia/iconos</label>
                            <center>
                                <div class="custom-control custom-switch">
                                    <input class="custom-control-input" id="pre" type="checkbox" name="geo_mañana" value="pre" checked onchange="cambioValorCheck(this)">
                                    <label class="custom-control-label" for="pre">Presencia (ON)/Iconos(OFF)</label>
                                </div>
                            </center>
                            <label>Tipo de servicio</label>
                            <div style="width:100%;">
                                <div style="width:49%; display: inline-block">
                                    <div class="custom-control custom-switch">
                                        <input class="custom-control-input" id="est" type="checkbox" name="geo_mañana" value="est" checked onchange="cambioValorCheck(this)">
                                        <label class="custom-control-label" for="est">Estacionario</label>
                                    </div>
                                </div>
                                <div style="width:49%; display: inline-block">
                                    <div class="custom-control custom-switch">
                                        <input class="custom-control-input" id="cil" type="checkbox" name="geo_mañana" value="cil" checked onchange="cambioValorCheck(this)">
                                        <label class="custom-control-label" for="cil">Cilindro</label>
                                    </div>
                                </div>
                            </div>



                            <select id="forma_pedido" class="form-control">
                                <option value="Re">SERVICIO EST/CIL</option>
                                <option value=".">MEDIO DE PEDIDO</option>
                                <option value="Re">USO DE PEDIDO</option>
                                <option value="Re">ASISTENCIA</option>


                            </select><br />

                            <div id="medioPedido" style="display:none">

                                <label>Medio del pedido</label>
                                <table>
                                    <tr>
                                        <td>
                                            <div class="custom-control custom-switch">
                                                <input class="custom-control-input" id="app" type="checkbox" name="check_apl" value="app" checked onchange="cambioValorCheck(this)">
                                                <label class="custom-control-label" for="app">Aplicación</label>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="custom-control custom-switch">
                                                <input class="custom-control-input" id="cll" type="checkbox" name="check_cal" value="cll" checked onchange="cambioValorCheck(this)">
                                                <label class="custom-control-label" for="cll">Calle</label>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="custom-control custom-switch">
                                                <input class="custom-control-input" id="ccr" type="checkbox" name="check_ccr" value="ccr" checked onchange="cambioValorCheck(this)">
                                                <label class="custom-control-label" for="ccr">Callcenter</label>
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <div class="custom-control custom-switch">
                                                <input class="custom-control-input" id="pro" type="checkbox" name="check_prc" value="pro" checked onchange="cambioValorCheck(this)">
                                                <label class="custom-control-label" for="pro">Proactivo</label>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="custom-control custom-switch">
                                                <input class="custom-control-input" id="pxs" type="checkbox" name="check_pxs" value="pxs" checked onchange="cambioValorCheck(this)">
                                                <label class="custom-control-label" for="pxs">ProgXsis</label>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="custom-control custom-switch">
                                                <input class="custom-control-input" id="enc" type="checkbox" name="check_enc" value="enc" checked onchange="cambioValorCheck(this)">
                                                <label class="custom-control-label" for="enc">Encuesta</label>
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <div class="custom-control custom-switch">
                                                <input class="custom-control-input" id="web" type="checkbox" name="check_web" value="web" checked onchange="cambioValorCheck(this)">
                                                <label class="custom-control-label" for="web">WhatsApp</label>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="custom-control custom-switch">
                                                <input class="custom-control-input" id="cf" type="checkbox" name="check_cf" value="cf" checked onchange="cambioValorCheck(this)">
                                                <label class="custom-control-label" for="cf">CallCenterExt</label>
                                            </div>
                                        </td>
                                        <td></td>
                                    </tr>
                                </table>

                            </div>
                            <div id="usoPedido" style="display:none">

                                <label>Uso del pedido</label>

                                <table>
                                    <tr>
                                        <td>
                                            <div class="custom-control custom-switch">
                                                <input class="custom-control-input" type="checkbox" name="check_apl" value="dom" id="dom" checked onchange="cambioValorCheck(this)">
                                                <label class="custom-control-label" for="dom">Domestico</label>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="custom-control custom-switch">
                                                <input class="custom-control-input" type="checkbox" name="check_cal" value="com" id="com" checked onchange="cambioValorCheck(this)">
                                                <label class="custom-control-label" for="com">Comercial</label>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="custom-control custom-switch">
                                                <input class="custom-control-input" type="checkbox" name="check_ccr" value="ind" id="ind" checked onchange="cambioValorCheck(this)">
                                                <label class="custom-control-label" for="ind">Industrial</label>
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <div class="custom-control custom-switch">
                                                <input class="custom-control-input" type="checkbox" name="check_prc" value="ser" id="ser" checked onchange="cambioValorCheck(this)">
                                                <label class="custom-control-label" for="ser">Servicios</label>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="custom-control custom-switch">
                                                <input class="custom-control-input" type="checkbox" name="check_pxs" value="car" id="car" checked onchange="cambioValorCheck(this)">
                                                <label class="custom-control-label" for="car">Carburacion</label>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="custom-control custom-switch">
                                                <input class="custom-control-input" id="gra" type="checkbox" name="check_enc" value="gra" checked onchange="cambioValorCheck(this)">
                                                <label class="custom-control-label" for="gra">Granjas</label>
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <div class="custom-control custom-switch">
                                                <input class="custom-control-input" id="tor" type="checkbox" name="check_web" value="tor" checked onchange="cambioValorCheck(this)">
                                                <label class="custom-control-label" for="tor">Tortillerias</label>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="custom-control custom-switch">
                                                <input class="custom-control-input" id="pan" type="checkbox" name="check_pxs" value="pan" checked onchange="cambioValorCheck(this)">
                                                <label class="custom-control-label" for="pan">Panaderias</label>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="custom-control custom-switch">
                                                <input class="custom-control-input" id="exj" type="checkbox" name="check_enc" value="exj" checked onchange="cambioValorCheck(this)">
                                                <label class="custom-control-label" for="exj">ExtJudicial</label>
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <div class="custom-control custom-switch">
                                                <input class="custom-control-input" id="pgs" type="checkbox" name="check_web" value="pgs" checked onchange="cambioValorCheck(this)">
                                                <label class="custom-control-label" for="pgs">DomSin/Asis</label>
                                            </div>
                                        </td>
                                        <td></td>
                                        <td></td>
                                    </tr>
                                </table>
                            </div>
                            <center>
                                <button id="" class="btn btn-outline-primary" onclick="muestraIconos()">Mostrar</button>
                            </center>
                        </div>
                        <div id="div_rutas" style="display:none;">
                            <label>Rutas asociadas a la planta</label>
                            <select id="rutas"></select>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                    <!--<button type="button" class="btn btn-primary">Save changes</button>-->
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="herramientas" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Colonias, Municipios, Poligonos</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <button class="btn btn-outline-primary" style="width:100%;" onclick="dialogBuscarColonia()">Colonias/Municipios</button>

                    <button class="btn btn-outline-primary" style="width:100%;" onclick="dialogpPoligonosLibres()">Poligonos libres</button>

                    <button class="btn btn-outline-primary" style="width:100%;" onclick="quitarRutas()">Quitar rutas</button>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                    <button type="button" class="btn btn-primary">Save changes</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="negocios" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">DENUE</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body card">
                    <div class="custom-control custom-switch">
                        <input class="custom-control-input" id="checNegocios" type="checkbox" name="" value="Kilometros">
                        <label class="custom-control-label" for="checNegocios">Busqueda de Negocios</label>
                    </div>
                    Palabra clave de busqueda:
                    <input type="text" id="condi" class="form-control" placeholder="palabra clave" />
                    Radio de busqueda :
                    <div class="custom-control custom-switch">
                        <input class="custom-control-input" id="checKilometros" type="checkbox" name="" min="0" value="Kilometros" checked onchange="KmM(this)">
                        <label class="custom-control-label" for="checKilometros">Kilometros</label>
                    </div>
                    <div class="custom-control custom-switch">
                        <input class="custom-control-input" id="checMetros" type="checkbox" name="" min="0" value="Metros" onchange="KmM(this)">
                        <label class="custom-control-label" for="checMetros">Metros</label>
                    </div>
                    <input type="number" id="inpKmM" class="form-control" value="0" />
                    <br />

                    <a class="btn btn-success btn-icon-split" onclick="NegociosToExcel()" style="width:100%;">
                        <span class="text" style="color:white;">Resultados a Excel</span>
                    </a>
                    <br />
                    <a class="btn btn-danger btn-icon-split" onclick="negociosToPdf()" style="width:100%;">
                        <span class="text" style="color:white;">Resultados a PDF</span>
                    </a>
                    <br />
                    <a class="btn btn-primary btn-icon-split" onclick="limpiarNegocios()" style="width:100%;">
                        <span class="text" style="color:white;">Limpiar negocios</span>
                    </a>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                    <!--<button type="button" class="btn btn-primary">Save changes</button>-->
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="simbologia" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Simbologia</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body card">
                    <div id="cat_ped" style="display:inline;">
                        COLORES:
                        <br />
                        <img class="imgLogin" src="~/Images/COLOR_APLICACION.png" style="width: 20px; height: 20px;" /> Callcenter
                        <br />
                        <img class="imgLogin" src="~/Images/COLOR_CALLE.png" style="width: 20px; height: 20px;" /> Calle
                        <br />
                        <img class="imgLogin" src="~/Images/COLOR_CALLCENTER.png" style="width: 20px; height: 20px;" /> Aplicación
                        <br />
                        <img class="imgLogin" src="~/Images/COLOR_PROACTIVO.png" style="width: 20px; height: 20px;" /> Proactivo
                        <br />
                        <img class="imgLogin" src="~/Images/COLOR_PROXSIS.png" style="width: 20px; height: 20px;" /> Prog x Sis
                        <br />
                        <img class="imgLogin" src="~/Images/COLOR_ENCUESTA.png" style="width: 20px; height: 20px;" /> Encuesta
                        <br />
                        <img class="imgLogin" src="~/Images/COLOR_WEB.png" style="width: 20px; height: 20px;" /> Whats app
                        <br />
                        <center>
                            SERVICIO:<br />
                        </center>
                        <img class="imgLogin" src="~/Images/PEDIDO_E.png" />Estacionario
                        <br />
                        <img class="imgLogin" src="~/Images/PEDIDO_C.png" />Cilindro
                        <br />
                        <center> USO:<br /></center>
                        <img class="imgLogin" src="~/Images/USO_1.png" /> Domestico
                        <br />
                        <img class="imgLogin" src="~/Images/USO_2.png" /> Comercial
                        <br />
                        <img class="imgLogin" src="~/Images/USO_3.png" /> Industrial
                        <br />
                        <img class="imgLogin" src="~/Images/USO_4.png" /> Servicios
                        <br />
                        <img class="imgLogin" src="~/Images/USO_5.png" /> Carburacion
                        <br />
                        <img class="imgLogin" src="~/Images/USO_6.png" /> Granjas
                        <br />
                        <img class="imgLogin" src="~/Images/USO_7.png" /> Tortillas
                        <br />
                        <img class="imgLogin" src="~/Images/USO_8.png" /> Panaderia
                        <br />
                        <img class="imgLogin" src="~/Images/USO_9.png" /> Extra judicial
                        <br />
                        <img class="imgLogin" src="~/Images/USO_10.png" />Plus gas
                        <br />

                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                    <!--<button type="button" class="btn btn-primary">Save changes</button>-->
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="geocercas" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Geocercas</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body card">
                    <center>
                        <label style="margin-left:50px"> TURNOS GEOCERCAS : </label>
                        <div style="width:100%">
                            <div style="display:inline-block; width:49%">
                                <div class="custom-control custom-switch">
                                    <input class="custom-control-input" id="checkGeoMañana" type="checkbox" name="geo_mañana" value="mañana" checked onchange="cambioValorCheck(this)">
                                    <label class="custom-control-label" for="checkGeoMañana">Mañana</label>
                                </div>
                            </div>
                            <div style="display:inline-block; width:49%">
                                <div class="custom-control custom-switch">
                                    <input class="custom-control-input" id="checkGeoTarde" type="checkbox" name="geo_tarde" value="tarde" checked onchange="cambioValorCheck(this)">
                                    <label class="custom-control-label" for="checkGeoTarde">Tarde</label>
                                </div>
                            </div>
                        </div>
                        <br>


                        <label style="margin-left:50px"> RUTAS GEOCERCAS : </label>
                        <div style="width:100%">
                            <div style="display:inline-block; width:49%">
                                <div class="custom-control custom-switch">
                                    <input class="custom-control-input" id="rut_cil" type="checkbox" name="rut_cil" value="cilindro" checked onchange="cambioValorCheck(this)">
                                    <label class="custom-control-label" for="rut_cil">Cilindros</label>
                                </div>
                            </div>
                            <div style="display:inline-block; width:49%">
                                <div class="custom-control custom-switch">
                                    <input class="custom-control-input" id="rut_pip" type="checkbox" name="rut_pip" value="pipa" checked onchange="cambioValorCheck(this)">
                                    <label class="custom-control-label" for="rut_pip">Pipas</label>
                                </div>
                            </div>
                        </div>

                        <br>


                        <label style="margin-left:50px"> COLOR GEOCERCAS: </label>

                        <input type="color" class="form-control" id="color_select" style="width:100%">
                        Intencidad: <input type="range" id="inten_geo" name="points" min="1" max="99" style="width:100%;">
                    </center>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                    <!--<button type="button" class="btn btn-primary">Save changes</button>-->
                </div>
            </div>
        </div>
    </div>
    
</body>














</html>
<script async defer src="https://maps.googleapis.com/maps/api/js?&key=AIzaSyCf_hsFGX6cXVpT886VRlmTIjwgI98k788&callback=initMap&libraries=geometry,drawing,visualization&sensor=false&dummy=.js"></script>
<script type="text/javascript" src="https://www.google.com/jsapi"></script>
<script lang="javascript" src="~/Scripts/xlsx.full.min.js"></script>
<script lang="javascript" src="~/Scripts/FileSaver.min.js"></script>


<script type="text/javascript">
    google.load("visualization", "1", { packages: ["table", "corechart"], 'language': 'es' });
    var geocercas = [];              // contiene las informacion de las geocercas en crudo
    var geocercas_en_mapa = []; // contiene las geocercas que estan en el mapa
    var rutas_en_mapa = [];     // muesta una ruta en el mapa con relacion a su geocerca
    var turno_mañana = false;    // controla la visualizacion de las geocercas de turno matutino
    var turno_tarde = false;     // controla la visualizacion de las geocercas de turno vespertino
    var ruta_cil = true;        // controla la visualizacion de las geocercas de rutas de cilindro
    var ruta_pip = true;        // controla la visualizacion de las geocercas de rutas de pipa
    var colorGeo = '#FF0000';   // variable que almacena el color de las geocercas
    var intencidad = 30;        // variable que controla la intencidad de color de las geocercas
    var map;                    // contiene el mapa de google maps
    var servidoresNotas = "";   // almacena los servidores de donde se optendra la informacion de las notas
    var notas = [];                  // almacena la notas que resulte de consultar uno o varios servidores en un rango de fechas;
    var notasRuta = [];         //almacena las notas correspondientes a la venta de una ruta.
    var dom = true, com = true, ind = true, ser = true, car = true, gra = true, tor = true, pan = true, exj = true, pgs = true; // variables de control de checks para mostrar iconos de uso de nota de venta
    var app = true, cll = true, ccr = true, pro = true, pxs = true, enc = true, web = true, cf= true; // variblaes de control de check´s para mostrar iconos de forma de pedido
    var est = true, cil = true; // controlan la visualizacion de estacionarios y ciliindros en el mapa
    var arr_marcadores = [];    // almacena los marcadores mostrados en el mapa.
    var arr_heatmap = [];       // almacena los heatmaps que se ven en el mapa.
    var planta = "";
    var pre = true;             //controla la visualizacion de la presencia (mapas de calor)
    var heatMapDataCil = [], heatMapDataEst = []; // mapas de presencia de estaciones y cilindros (mapas de calor)
    var servidores = [];         // almacena los servidores resultado de consultar las geogercas;
    var dialogos = [];           // contiene los dialogos en pantalla;
    var edosIndices = [];        // contiene los estados con los indices inferior y superior de sus colonias (datos del inegi)
    var arr_colonias = [];       // contiene la colonia mostrada en el mapa.
    var notas_analisis = [];     // contiene las notas dentro de un area geografica para realizar el analisis
    var heandPoligons = [];      // contiene el poligono dibujado a mano
    var notasSinGPS = [];        // contiene las notas que no tienen GPS
    var notasByPla = [];
    var evento;                  // evento a analizar con grficas
    var poligonoLibre = [];      // contiene las coordenadas de un poligono libre
    var arr_municipios = [];     // contiene la informacion cruda de los municipios consultado de la base de datos
    var municipios_en_mapa = []; // contiene los poligonos de los municipios en el mapa.
    var icon_planta = [];        // almacena el color del icono que le corresponde por planta cuando se muestra un server completo.
    var todasLasColonias = [];

    var geoCircle = [];          //Contiene la coleccion de circulos dibujados en el mapa
    var km_m = 1000;
    var negocios = [];           //Contine los negicios tras llamar la api de INEGI 
    var negociosEnMapa = [];     // contiene los negocios dibujados en el mapa

    $(document).ready(function () {
        document.getElementById('header_layout').style.display = "none";
        // colocar fechas actuales en los campos de fecha
        var now = new Date();
        var day = ("0" + now.getDate()).slice(-2);
        var month = ("0" + (now.getMonth() + 1)).slice(-2);
        var today = now.getFullYear() + "-" + (month) + "-" + (day);
        $("#fecha_ini").val(today);
        $("#fecha_fin").val(today);
        // desabilitr las geocercas inicialmente
        document.getElementById("checkGeoMañana").checked = false;
        document.getElementById("checkGeoTarde").checked = false;
        //document.getElementById('imgload').style.display = "none";
        //document.getElementById('geoload').style.display = "inline";
        // desabilitar opciones si no es usuario administrador
        if (document.getElementById("serv").innerHTML.trim() != 'Admin') {
           // document.getElementById('btnToExcel').style.display = "none";
        }
        //obtener las geocercas dependiendo del servidor
        //geocercas = JSON.parse(localStorage.getItem('geocercas'));
        var geopAux=JSON.parse(localStorage.getItem('geocercaP'));
        var geocAux = JSON.parse(localStorage.getItem('geocercaC'));
        for (var i = 0; i < geopAux.length; i++) {
            geocercas.push(geopAux[i]);
        }
        for (var i = 0; i < geocAux.length; i++) {
            geocercas.push(geocAux[i]);
        }
       
        guardaServidores();
        dibujaGeocercas();
        getLastDayNotes();
        colocaPlantas();

        //$.ajax({
        //    type: "POST",
        //    url: "/Home/getGeocercas/",
        //    data: { paramSrv: document.getElementById('serv').innerHTML },
        //    datatype: "json",
        //    success: function (data) {

        //        if (data.length > 0) {
        //            document.getElementById('geoload').style.display = "none";
        //            geocercas = data;
        //            guardaServidores();
        //            dibujaGeocercas();
        //            getLastDayNotes();

        //        }
        //        else {
        //            document.getElementById('geoload').style.display = "none";
        //            alert("No existe información de geocercas en el servidor ingresado");
        //        }
        //    },
        //    error: function (request, status, error) {

        //        alert(request.responseText);
        //    }
        //});
        // obtener los estados y los indices de sus colonias
        $.ajax({
            type: "POST",
            url: "/Home/getEstadosIndex/",
            data: { paramSrv: document.getElementById('serv').innerHTML },
            datatype: "json",
            success: function (data) {

                if (data.length > 0) {

                    edosIndices = data;
                    agregaEstados();

                }

            },
            error: function (request, status, error) {
                mensajeSweet("Ooops", request.responseText, "info");
                //alert(request.responseText);
            }
        });




    });
    // inicializa el mapa
    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 20.6122835, lng: -100.4802576 },
            zoom: 13,
        });
        var drawingManager = new google.maps.drawing.DrawingManager({
            // drawingMode: google.maps.drawing.OverlayType.MARKER,
            drawingControl: true,
            drawingControlOptions: {
                position: google.maps.ControlPosition.TOP_LEFT,
                drawingModes: ['polygon']
            },
            markerOptions: { draggable: true },

        });
        drawingManager.setMap(map);
        google.maps.event.addListener(drawingManager, 'overlaycomplete', finDraw);

        map.addListener('click', function (mapsMouseEvent) {
            if (document.getElementById('checNegocios').checked) {
                getNegocios(mapsMouseEvent.latLng);
            }

        });
    }
    // obtiene la fecha limite de donde se tiene notas disponible
    function getLastDayNotes() {
        var fecha_ini = document.getElementById("fecha_ini").value;
        var fecha_fin = document.getElementById("fecha_fin").value;
        var serv = document.getElementById("serv").innerHTML.trim();
       cierraDialog();
        if (serv != 'Admin') {
            //consultar las notas
            $.ajax({
                type: "POST",
                url: "/Home/getUltimaDiaCopiado/",
                data: { paramSrv: serv.toLowerCase() },
                datatype: "json",
                success: function (data) {

                    if (data.length > 0) {
                        mensajeTimer('NOTAS', "Notas disponibles hasta el dia: " + data[0].fec_eru, 'info');
                        //alert("Notas disponibles hasta el dia: " + data[0].fec_eru);

                    }
                    else {
                        mensajeTimer('', "No fue posible determinar la fecha limite para consultar las notas", 'info');
                        //alert("No fue posible determinar la fecha limite para consultar las notas");

                    }
                },
                error: function (request, status, error) {
                    mensajeSweet("Ooops", request.responseText, "error")
                   // alert(request.responseText);
                }
            });

        }

        else {

        }











    }
    // asignacion de plantas en el control delect
    function colocaPlantas() {

        //agregar los elementos a  la lista desplegable
        document.getElementById('select_plantas').length = 0;
        // vaciar el arreglo de color por planta
        icon_planta = [];
        var index_icon = 1;
        select = document.getElementById('select_plantas');
        select.lenght = 0;
        // colocar la opcion de Todas por defaul
        //var opt = document.createElement('option');
        //opt.innerHTML = 'Todas' + '-' + '';
        //select.appendChild(opt);



        if (document.getElementById('serv').innerHTML.trim() != 'Admin') {
            for (var i = 0; i < arr_plantas.length; i++) {
                var arr_valores = arr_plantas[i].split("|");
                //hiddenPla
                //if (document.getElementById('serv').innerHTML.toUpperCase().trim() == arr_valores[0].trim().toUpperCase().trim()) {
                if (document.getElementById('hiddenPla').value == arr_valores[1].trim().toUpperCase().trim()) {
                    var opt = document.createElement('option');
                    opt.value = i;
                    opt.innerHTML = arr_valores[1] + '-(' + arr_valores[0] + ')' + arr_valores[2];
                    select.appendChild(opt);
                    icon_planta.push({ indiceColor: index_icon, planta: arr_valores[1].trim() });
                    index_icon++;
                }

            }
        }
        else {
            var plantasAdmin = document.getElementById("input_servidores").value.trim();
            var re = /'/g;
            plantasAdmin = plantasAdmin.replace(re, "");
            var servAdmin = plantasAdmin.split(',');
            for (var i = 0; i < servAdmin.length - 1; i++) {
                for (var j = 0; j < arr_plantas.length; j++) {
                    var arr_valores = arr_plantas[j].split("|");
                    if (servAdmin[i].trim().toUpperCase() == arr_valores[0].trim().toUpperCase()) {
                        var opt = document.createElement('option');
                        opt.value = j;
                        opt.innerHTML = arr_valores[1] + '-' + arr_valores[2];
                        select.appendChild(opt);
                        icon_planta.push({ indiceColor: index_icon, planta: arr_valores[1].trim() });
                        index_icon++;
                    }

                }


            }

        }
        // asigar la variable planta con la planta actual
        var txtSelec = $("#select_plantas option:selected").text();
        var valores = txtSelec.split('-');
        planta = valores[0].trim();
        if (planta != 'Todas') {
            llenaRutas(planta);
        }

    }
    //accion al seleccionar alguna de las plantas
    $(select_plantas).change(function () {
        var txtSelec = $("#select_plantas option:selected").text();
        var ped_rut = $("#accion option:selected").text();
        var valores = txtSelec.split('-');
        llenaRutas(valores[0].trim());
        planta = valores[0].trim();
        dibujaGeocercas();
        if (ped_rut == "RUTAS") {
            limpiarMarcadores();

        } else
            muestraIconos();

    });
    //selecciona el color de las geocercas
    $(document).on("change", "#color_select", function () {
        colorGeo = document.getElementById("color_select").value
        dibujaGeocercas();
    });
    //aplica la intencidad de color de las geocercas
    $(document).on("change", "#inten_geo", function () {
        intencidad = document.getElementById("inten_geo").value
        dibujaGeocercas();
    });
    //Dibujar las geocercas
    function dibujaGeocercas() {

        quitarGeocercas();
        for (var i = 0; i < geocercas.length; i++) {
            if (planta == geocercas[i].pla_geo.trim()) {
                var puntos = geocercas[i].puntos_geo.trim();
                var coordenadas = puntos.split('),(');
                var poligon = [];
                var lonlat;
                // obtener las coredenadas en areglo
                for (var j = 0; j < coordenadas.length; j++) {
                    coordenadas[j] = coordenadas[j].replace('(', '');
                    coordenadas[j] = coordenadas[j].replace(')', '');
                    lonlat = coordenadas[j].split(",");
                    poligon.push(new google.maps.LatLng(parseFloat(lonlat[0]), parseFloat(lonlat[1])));
                    point = new google.maps.LatLng(lonlat[0], lonlat[1]);
                }

                // map.setCenter(point);
                // Contruccion del la geocerca
                var geopoligon = new google.maps.Polygon({
                    paths: poligon,
                    strokeColor: colorGeo,
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: colorGeo,
                    //fillColor: geocercas[i].color_geo.trim(),
                    fillOpacity: intencidad / 100,
                    title: geocercas[i].nom_geo,
                    html: 'RUTA: ' + geocercas[i].nom_geo.trim() + '\n' + 'HORARIO: ' + geocercas[i].hraini_geo + 'hrs - ' + geocercas[i].hrafin_geo + 'hrs'
                });

                // determinar si mostrar el turno y ruta
                switch (geocercas[i].turno_geo.trim()) {
                    case "MAÑANA":
                        if (turno_mañana) {

                            switch (geocercas[i].tipuni_geo.trim()) {
                                case "Cilindro":
                                    if (ruta_cil) {
                                        geopoligon.setMap(map);
                                        geocercas_en_mapa.push(geopoligon);

                                    }
                                    break;
                                case "Pipa":
                                    if (ruta_pip) {
                                        geopoligon.setMap(map);
                                        geocercas_en_mapa.push(geopoligon);
                                    }
                                    break;
                                default:
                            }
                        }
                        break;
                    case "TARDE":
                        if (turno_tarde) {
                            switch (geocercas[i].tipuni_geo.trim()) {
                                case "Cilindro":
                                    if (ruta_cil) {
                                        geopoligon.setMap(map);
                                        geocercas_en_mapa.push(geopoligon);

                                    }
                                    break;
                                case "Pipa":
                                    if (ruta_pip) {
                                        geopoligon.setMap(map);
                                        geocercas_en_mapa.push(geopoligon);
                                    }
                                    break;
                                default:

                            }
                        }
                        break;
                    default:

                }

                infoWindowG = new google.maps.InfoWindow();
                google.maps.event.addListener(geopoligon, 'click', MuestraInfo);

                /* google.maps.event.addListener(geopoligon, 'mouseover', MuestraInfoGeocerca);
                 google.maps.event.addListener(geopoligon, 'mouseout', quitaInfoGeocerca);
                 function MuestraInfoGeocerca(event) {
                     infoWindowG.setContent(this.html);
                     infoWindowG.setPosition(event.latLng);
                     infoWindowG.open(map);
                 }
                 function quitaInfoGeocerca(event) {
                     infoWindowG.setContent(this.html);
                     infoWindowG.setPosition(event.latLng);
                     infoWindowG.close(map);
                 }
                */

            }//fin de agregar geocerca

        }
    }
    // mestra un analisis de las geocercas al darle clic
    function MuestraInfo(event) {
        infoWindowG.setContent(this.html);
        infoWindowG.setPosition(event.latLng);
        infoWindowG.open(map);
        // se valida si esta habilitada la opcion de mostrar negocios
        if (document.getElementById('checNegocios').checked) {
            getNegocios(event.latLng);
        }
        else
        {
        var servidor = document.getElementById("serv").innerHTML;
        var fecha_ini = document.getElementById("fecha_ini").value;
        var fecha_fin = document.getElementById("fecha_fin").value;
        document.getElementById("titulo_graficas").innerHTML = 'Servidor: ' + servidor + ' Tipo de poligono: Geocerca Descripcion: ' + this.title + ' Fechas: ' + fecha_ini + ' a ' + fecha_fin;

        var formaInfo = $("#forma_pedido option:selected").text();

        var geocerca_analisis;
        for (var i = 0; i < geocercas_en_mapa.length; i++) {
            if (geocercas_en_mapa[i].html == this.html) {
                geocerca_analisis = geocercas_en_mapa[i];
                break;
            }
        }
        notas_analisis = [];
        if (notas != null) {
            if (notas.length > 0) {
                for (var i = 0; i < notas.length; i++) {
                    if (notas[i].gps_nvta != null & notas[i].gps_nvta.trim().split(' ').length >= 2) {
                        var putosgps = notas[i].gps_nvta.trim().split(' ');
                        var point1 = new google.maps.LatLng(parseFloat(putosgps[0].trim()), parseFloat(putosgps[1].trim()));
                        if ((google.maps.geometry.poly.containsLocation(point1, geocerca_analisis) & planta.trim() == notas[i].pla_nvta.trim()) || (planta == 'Todas' & google.maps.geometry.poly.containsLocation(point1, geocerca_analisis)))
                            if (determinarMuestreoMarker(notas[i], formaInfo))
                                notas_analisis.push(notas[i]);
                    }
                }
                analizaArea(notas_analisis);
            }
            else {
                confirm("No contienes notas para realizar el analisis");
            }

        }
        else {
            confirm("No contienes notas para realizar el analisis");
        }
    }
    }
    //quita las geocercas actuales en el mapa
    function quitarGeocercas() {
        if (geocercas_en_mapa.length > 0) {
            for (var i = 0; i < geocercas_en_mapa.length; i++) {
                geocercas_en_mapa[i].setMap(null);
            }
        }


    }
    //verifica la seleccion de un cambio de valor en los checkbox
    function cambioValorCheck(checbox) {
        var valor = checbox.value;
        switch (valor) {
            case "mañana":
                if (checbox.checked)
                    turno_mañana = true;
                else
                    turno_mañana = false;
                dibujaGeocercas();
                break;
            case "tarde":
                if (checbox.checked)
                    turno_tarde = true;
                else
                    turno_tarde = false;
                dibujaGeocercas();
                break;

            case "cilindro":
                if (checbox.checked)
                    ruta_cil = true;
                else
                    ruta_cil = false;
                dibujaGeocercas();
                break;
            case "pipa":
                if (checbox.checked)
                    ruta_pip = true;
                else
                    ruta_pip = false;
                dibujaGeocercas();
                break;
                //forma de pedido
            case "app":// aplicacion
                if (checbox.checked)
                    app = true;
                else
                    app = false;
                muestraIconos();
                break;
            case "cll":// calle
                if (checbox.checked)
                    cll = true;
                else
                    cll = false;
                muestraIconos();
                break;
            case "ccr"://callcenter
                if (checbox.checked)
                    ccr = true;
                else
                    ccr = false;
                muestraIconos();
                break;
            case "pro"://proactivo
                if (checbox.checked)
                    pro = true;
                else
                    pro = false;
                muestraIconos();
                break;
            case "pxs"://programado por sistema
                if (checbox.checked)
                    pxs = true;
                else
                    pxs = false;
                muestraIconos();
                break;
            case "enc"://encuesta
                if (checbox.checked)
                    enc = true;
                else
                    enc = false;
                muestraIconos();
                break;
            case "web"://web
                if (checbox.checked)
                    web = true;
                else
                    web = false;
                muestraIconos();
                break;
            case "cf"://call fasst
                if (checbox.checked)
                    cf = true;
                else
                    cf = false;
                muestraIconos();
                break;
                // servicios
            case "est"://web
                if (checbox.checked)
                    est = true;
                else
                    est = false;
                muestraIconos();
                break;
            case "cil"://web
                if (checbox.checked)
                    cil = true;
                else
                    cil = false;
                muestraIconos();
                break;
                // uso de nota de venta
            case "dom":// domestico
                if (checbox.checked)
                    dom = true;
                else
                    dom = false;
                muestraIconos();
                break;
            case "com"://comercial
                if (checbox.checked)
                    com = true;
                else
                    com = false;
                muestraIconos();
                break;
            case "ind"://indistrial
                if (checbox.checked)
                    ind = true;
                else
                    ind = false;
                muestraIconos();
                break;
            case "ser"://servicios
                if (checbox.checked)
                    ser = true;
                else
                    ser = false;
                muestraIconos();
                break;
            case "car"://carburacion
                if (checbox.checked)
                    car = true;
                else
                    car = false;
                muestraIconos();
                break;
                // var dom = true, com = true, ind = true, ser = true, car = true, gra = true, tor = true, pan = true, exj = true, pgs = true;
            case "gra"://granjas
                if (checbox.checked)
                    gra = true;
                else
                    gra = false;
                muestraIconos();
                break;
            case "tor"://tortillerias
                if (checbox.checked)
                    tor = true;
                else
                    tor = false;
                muestraIconos();
                break;
            case "pan"://panaderias
                if (checbox.checked)
                    pan = true;
                else
                    pan = false;
                muestraIconos();
                break;
            case "pgs"://plus gas
                if (checbox.checked)
                    pgs = true;
                else
                    pgs = false;
                muestraIconos();
                break;
            case "exj"://extrajudicial
                if (checbox.checked)
                    exj = true;
                else
                    exj = false;
                muestraIconos();
                break;
                //presencia
            case "pre"://extrajudicial
                if (checbox.checked)
                    pre = true;
                else
                    pre = false;
                muestraIconos();
                break;
            case "controles"://controla la visualizacion de los controles
                if (checbox.checked) {
                    $('#turno_geo').show();
                    $('#cat_ped').show();
                    $('#form_map').show();
                }
                else {
                    $('#turno_geo').hide();
                    $('#cat_ped').hide();
                    $('#form_map').hide();
                }

                break;

        }





    }
    // cambia el div de la forma de pedidos
    $(forma_pedido).change(function () {
        var txtSelec = $("#forma_pedido option:selected").text();

        switch (txtSelec) {
            case "MEDIO DE PEDIDO":
                document.getElementById('medioPedido').style.display = "inline";
                document.getElementById('usoPedido').style.display = "none";
                break;
            case "USO DE PEDIDO":
                document.getElementById('medioPedido').style.display = "none";
                document.getElementById('usoPedido').style.display = "inline";
                break;
            case "SERVICIO EST/CIL":
                document.getElementById('medioPedido').style.display = "none";
                document.getElementById('usoPedido').style.display = "none";
                break;
            case "ASISTENCIA":
                document.getElementById('medioPedido').style.display = "none";
                document.getElementById('usoPedido').style.display = "none";
                break;
        }
        muestraIconos();

    });
    //cambia los div para consultar pedidos o informacion de las rutas
    $(accion).change(function () {
        var txtSelec = $("#accion option:selected").text();
        //ViewBag.Srv
        //confirm('has cambiado de opcion ')

        switch (txtSelec) {
            case "PEDIDOS":
                document.getElementById('div_pedidos').style.display = "inline";
                document.getElementById('div_rutas').style.display = "none";
                break;
            case "RUTAS":
                limpiarMarcadores();
                document.getElementById('div_pedidos').style.display = "none";
                document.getElementById('div_rutas').style.display = "inline";
                break;

        }
    });
    // llena el combo con las rutas seleccionadas dependiendo de la planta
    function llenaRutas(planta) // llena el combo con las rutas de la planta selecciona
    {
        document.getElementById("rutas").length = 0;
        for (var i = 0; i < geocercas.length; i++) {
            if (geocercas[i].pla_geo.trim() == planta) {
                var x = document.getElementById("rutas");
                var option = document.createElement("option");
                option.text = geocercas[i].nom_geo.trim();
                x.add(option);
            }

        }
    }
    // acciones al seleccionar una ruta
    $(rutas).change(function () {
        var nombre_ruta = $("#rutas option:selected").text();

        //quitarRutas();

        //inicio de remarcar
        var txtSelec = $("#select_plantas option:selected").text();
        var valores = txtSelec.split("-");
        var planta_seleccionada = valores[0].trim();
        for (var i = 0; i < geocercas.length; i++) {
            if (planta_seleccionada == geocercas[i].pla_geo.trim() & geocercas[i].nom_geo.trim() == nombre_ruta.trim()) {
                var puntos = geocercas[i].puntos_geo.trim();
                var coordenadas = puntos.split('),(');
                var poligon = [];
                var lonlat;
                var point;
                // obtener las coredenadas en areglo
                for (var j = 0; j < coordenadas.length; j++) {
                    coordenadas[j] = coordenadas[j].replace('(', '');
                    coordenadas[j] = coordenadas[j].replace(')', '');
                    lonlat = coordenadas[j].split(",");
                    poligon.push(new google.maps.LatLng(parseFloat(lonlat[0]), parseFloat(lonlat[1])));
                    point = new google.maps.LatLng(parseFloat(lonlat[0]), parseFloat(lonlat[1]));
                }



                map.setCenter(point);
                // Contruccion del la geocerca
                var geopoligon = new google.maps.Polygon({
                    paths: poligon,
                    strokeColor: colorGeo,
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: geocercas[i].color_geo,
                    fillOpacity: intencidad / 100,
                    title: geocercas[i].nom_geo,
                    html: 'RUTA: ' + geocercas[i].nom_geo.trim() + '\n' + 'HORARIO: ' + geocercas[i].hraini_geo + 'hrs - ' + geocercas[i].hrafin_geo + 'hrs'
                });
                geopoligon.setMap(map);
                rutas_en_mapa.push(geopoligon);
                // determinar si mostrar el turno y ruta

                infoWindowG = new google.maps.InfoWindow();
                google.maps.event.addListener(geopoligon, 'click', MuestraInfoRuta);


            }//fin de agregar geocerca

        }
        //fin de remarcar

        // colocar  los marcadores de venta de ka ruta en cuestion
        puntosVtaRuta(nombre_ruta);



    });
    //accion a darle clic a una geocerca de una ruta en particular
    function MuestraInfoRuta(event) {
        infoWindowG.setContent(this.html);
        infoWindowG.setPosition(event.latLng);
        infoWindowG.open(map);
        if (document.getElementById('checNegocios').checked) {
            getNegocios(event.latLng);
        }
        else {
        var servidor = document.getElementById("serv").innerHTML;
        var fecha_ini = document.getElementById("fecha_ini").value;
        var fecha_fin = document.getElementById("fecha_fin").value;
        document.getElementById("titulo_graficas").innerHTML = 'Servidor: ' + servidor + '     Tipo de poligono: Ruta      Descripcion: Analisis de ventas de la ruta ' + this.title + '    Fechas: ' + fecha_ini + ' a ' + fecha_fin;

        var formaInfo = $("#forma_pedido option:selected").text();

        var geocerca_analisis;
        for (var i = 0; i < rutas_en_mapa.length; i++) {
            if (rutas_en_mapa[i].html == this.html) {
                geocerca_analisis = rutas_en_mapa[i];
                break;
            }

        }

        // analisis
        var notasfueraAnalisis = [];
        var NotasProblemasGPS = [];
        notas_analisis = [];
        if (notas != null) {
            if (notas.length > 0) {
                for (var i = 0; i < notas.length; i++) {
                    if (notas[i].gps_nvta != null & notas[i].gps_nvta.trim().length > 2) {
                        var putosgps = notas[i].gps_nvta.trim().split(' ');
                        if (putosgps.length>=2) {
                            var point1 = new google.maps.LatLng(parseFloat(putosgps[0].trim()), parseFloat(putosgps[1].trim()));
                            // se determina si la nota que le pertenece al la ruta y esta fuera del poligono.
                            if (this.title.trim() == notas[i].ruta_nvta.trim() & !(google.maps.geometry.poly.containsLocation(point1, geocerca_analisis) & planta.trim() == notas[i].pla_nvta.trim())) {
                                if (determinarMuestreoMarker(notas[i], formaInfo))
                                    notasfueraAnalisis.push(notas[i]);
                            }
                            //se determina si la nota esta dentro del poligono y le pertenece a la ruta
                            if (google.maps.geometry.poly.containsLocation(point1, geocerca_analisis) & planta.trim() == notas[i].pla_nvta.trim() & this.title.trim() == notas[i].ruta_nvta.trim())
                                if (determinarMuestreoMarker(notas[i], formaInfo))
                                    notas_analisis.push(notas[i]);
                        }
                        else
                        {
                            NotasProblemasGPS.push(notas[i]);
                        }
                       
                    }


                }

                // se analizan las notas que concuerden dentro del poligono
                var sumaKG = 0;
                var sumaImp = 0;
                var promKG = 0;
                var promImp = 0;
                for (var i = 0; i < notas_analisis.length; i++) {
                    sumaImp = sumaImp + parseFloat(notas_analisis[i].impt_nvta.trim());
                    if (notas_analisis[i].tiprut_nvta.trim() == 'M') {
                        sumaKG = sumaKG + (parseFloat(notas_analisis[i].tlts_nvta.trim()) * 0.54);
                    } else {
                        sumaKG = sumaKG + (parseFloat(notas_analisis[i].tlts_nvta.trim()));
                    }
                }
                promKG = sumaKG / notas_analisis.length;
                promImp = sumaImp / notas_analisis.length;
                // Se analizan las notas de la ruta que esten fuera del poligono
                var sumaKGfuera = 0;
                var sumaImpfuera = 0;
                var promKGfuera = 0;
                var promImpfuera = 0;
                for (var i = 0; i < notasfueraAnalisis.length; i++) {
                    sumaImpfuera = sumaImpfuera + parseFloat(notasfueraAnalisis[i].impt_nvta.trim());
                    if (notasfueraAnalisis[i].tiprut_nvta.trim() == 'M') {
                        sumaKGfuera = sumaKGfuera + (parseFloat(notasfueraAnalisis[i].tlts_nvta.trim()) * 0.54);
                    } else {
                        sumaKGfuera = sumaKGfuera + (parseFloat(notasfueraAnalisis[i].tlts_nvta.trim()));
                    }
                }
                promKGfuera = sumaKGfuera / notasfueraAnalisis.length;
                promImpfuera = sumaImpfuera / notasfueraAnalisis.length;

                // Se analizan las notas de la ruta  con problemas en el gps
                var sumaKGPromGps = 0;
                var sumaImpPromGps = 0;
                var promKGPromGps = 0;
                var promImpPromGps = 0;
                for (var i = 0; i < NotasProblemasGPS.length; i++) {
                    sumaImpPromGps = sumaImpPromGps + parseFloat(NotasProblemasGPS[i].impt_nvta.trim());
                    if (NotasProblemasGPS[i].tiprut_nvta.trim() == 'M') {
                        sumaKGPromGps = sumaKGPromGps + (parseFloat(NotasProblemasGPS[i].tlts_nvta.trim()) * 0.54);
                    } else {
                        sumaKGPromGps = sumaKGPromGps + (parseFloat(NotasProblemasGPS[i].tlts_nvta.trim()));
                    }
                }
                promKGPromGps = sumaKGPromGps / NotasProblemasGPS.length;
                promImpPromGps = sumaImpPromGps / NotasProblemasGPS.length;
                // se crea la tabla del analisis
                var tablaresumen = new google.visualization.DataTable();
                tablaresumen.addColumn('string', 'CONCEPTO');
                tablaresumen.addColumn('string', 'VALOR');
                //se llena la tabla con los datos del analisis
                tablaresumen.addRow(['DENTRO DEL POLIGONO', '']);
                tablaresumen.addRow(['No notas        ', notas_analisis.length + '']);
                tablaresumen.addRow(['Kg´s vendidos     ', sumaKG.toFixed(2) + '']);
                tablaresumen.addRow(['Importe obtenido   ', '$ ' + sumaImp.toFixed(2) + '']);
                tablaresumen.addRow(['Kg´s promedio por nota ', promKG.toFixed(2) + '']);
                tablaresumen.addRow(['Importe promedio por nota', '$ ' + promImp.toFixed(2) + '']);
                tablaresumen.addRow(['FUERA DEL POLIGONO', '']);

                tablaresumen.addRow(['No notas        ', notasfueraAnalisis.length + '']);
                tablaresumen.addRow(['Kg´s vendidos     ', sumaKGfuera.toFixed(2) + '']);
                tablaresumen.addRow(['Importe obtenido    ', '$ ' + sumaImpfuera.toFixed(2) + '']);
                tablaresumen.addRow(['Kg´s promedio por nota  ', promKGfuera.toFixed(2) + '']);
                tablaresumen.addRow(['Importe promedio por nota ', '$ ' + promImpfuera.toFixed(2) + '']);
                tablaresumen.addRow(['PROBLEMAS CON EL GPS', '']);

                tablaresumen.addRow(['No notas        ', NotasProblemasGPS.length + '']);
                tablaresumen.addRow(['Kg´s vendidos     ', sumaKGPromGps.toFixed(2) + '']);
                tablaresumen.addRow(['Importe obtenido    ', '$ ' + sumaImpPromGps.toFixed(2) + '']);
                tablaresumen.addRow(['Kg´s promedio por nota  ', promKGPromGps.toFixed(2) + '']);
                tablaresumen.addRow(['Importe promedio por nota ', '$ ' + promImpPromGps.toFixed(2) + '']);

                tablaresumen.addRow(['TOTALES', '']);
                tablaresumen.addRow(['No notas                    ', (notasfueraAnalisis.length + notas_analisis.length + NotasProblemasGPS.length) + '']);
                tablaresumen.addRow(['Kg´s vendidos               ', (sumaKGfuera + sumaKG + sumaKGPromGps).toFixed(2) + '']);
                tablaresumen.addRow(['Importe obtenido                 ', '$ ' + (sumaImpfuera + sumaImp + sumaImpPromGps).toFixed(2) + '']);
                tablaresumen.addRow(['Kg´s promedio por nota                    ', ((sumaKGfuera + sumaKG + sumaKGPromGps) / (notasfueraAnalisis.length + notas_analisis.length + NotasProblemasGPS.length)).toFixed(2) + '']);
                tablaresumen.addRow(['Importe promedio por nota              ', '$ ' + ((sumaImpfuera + sumaImp + sumaImpPromGps) / (notasfueraAnalisis.length + notas_analisis.length+NotasProblemasGPS.length)).toFixed(2) + '']);




                //agregar la tabla al div correspondiente de la paguina HTML
                var contenedor = new google.visualization.Table(tblAnalisiGral);
                // AGREGAR IMPLEMENTACIONES DE HTML EN LAS CELDAS DE LA TABLA Y PRECENTAR NUMERACION DE REGISTROS
                contenedor.draw(tablaresumen, { allowHtml: true, showRowNumber: false });
                //AGREGAR EVENTO DE CLIC EN EL REGISTRO DE LA TABLA
                google.visualization.events.addListener(contenedor, 'select', function () {

                    //var row = table3.getSelection()[0].row
                });

                // juntar ambos conjuntos de notas para el muestreo de las graficas

                for (var i = 0; i < notasfueraAnalisis.length; i++) {
                    notas_analisis.push(notasfueraAnalisis[i]);
                }
                analizaArea(notas_analisis);
            }
            else {
                confirm("No contienes notas para realizar el analisis");
            }

        }
        else {
            confirm("No contienes notas para realizar el analisis");
        }



    }

    }
    // obtiene conjunto de notas deacuerdo el servidor o servidores y las fechas.
    function getNotas() {
        
       // $('#cargaNotas').modal('hide');
        var fecha_ini = document.getElementById("fecha_ini").value;
        var fecha_fin = document.getElementById("fecha_fin").value;
        //document.getElementById('imgload').style.display = "inline";
        document.getElementById('div_seleccion_servidores').style.display = "none";
        var serv = document.getElementById("serv").innerHTML.trim();

        if (serv == 'Admin' & document.getElementById("input_servidores").value.trim().length <= 0) {
            servidoresNotas = '';
            // seleccionar los servidores que seran consultados por el usuario admin
            //document.getElementById('imgload').style.display = "none";
            document.getElementById('div_seleccion_servidores').style.display = "inline";

        } else {
            if (serv != 'Admin')
                servidoresNotas = "'" + document.getElementById("serv").innerHTML + "'";
            else
                servidoresNotas = document.getElementById("input_servidores").value.trim() + "\'\'";
        }

        if (servidoresNotas != '') {
            colocaPlantas();
            limpiarMarcadores();
            limpiarHeatmaps();


            //consultar las notas
            $.ajax({
                type: "POST",
                url: "/Home/getNotas/",
                data: { paramSrv: servidoresNotas.toLowerCase(), fechaI: fecha_ini, fechaF: fecha_fin },
                beforeSend: function (objeto) {
                    
                    document.getElementById('btnInfoServer').innerHTML = '<span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span> Consultando...';
                   

                },
                complete: function () {
                    document.getElementById('btnInfoServer').innerHTML = 'Consultar Notas';
                    
                   
                    
                },
                datatype: "json",
                success: function (data) {

                    if (data.length > 0) {
                        
                       
                        notas = [];
                        notas = data;
                        document.getElementById('filtros').style.display = "inline"

                       // document.getElementById('imgload').style.display = "none";
                        getNotasSinGPS(notas);
                        muestraIconos();

                        document.getElementById("input_servidores").value = "";
                    }
                    else {
                        alert("No existen notas en el (los) servidor (es) consultado (s) en ese intervalo de fechas");
                        document.getElementById('imgload').style.display = "none";
                    }
                },
                error: function (request, status, error) {
                    // document.getElementById('imgload').style.display = "none";
                    mensajeSweet("Ooops", request.responseText, "error")
                    //alert(request.responseText);
                }
            });
        }






    }
    // muestra los iconos por tipos de servicio, forma de pedido, us y todos por server
    function muestraIconos() {
        var formaGraficar = $("#forma_pedido option:selected").text();
        var ptosLatLong = []; // almcena un par de coordenadas
        var gradientCil = ['rgba(204,0,0,0.2)']; // muestra el color de presencia de  los cilindros
        var gradientEst = ['rgba(0, 255, 255, 0)',
      'rgba(0, 255, 255, 1)',
      'rgba(0, 191, 255, 1)',
      'rgba(0, 127, 255, 1)',
      'rgba(0, 63, 255, 1)',
      'rgba(0, 0, 255, 1)',
      'rgba(0, 0, 223, 1)',
      'rgba(0, 0, 191, 1)',
      'rgba(0, 0, 159, 1)',
      'rgba(0, 0, 127, 1)',
      'rgba(63, 0, 91, 1)',
      'rgba(127, 0, 63, 1)',
      'rgba(191, 0, 31, 1)',
      'rgba(255, 0, 0, 1)']; // muestra el color de presencia de  los estacionarios
        var heatmapcil, heatmapest;
        var punto;
        heatMapDataCil.length = 0;
        heatMapDataEst.length = 0;
        limpiarMarcadores();
        limpiarHeatmaps();
        if (notas.length <= 0)
        {
            mensajeSweet("Ooops", "No existe informacion de notas de venta cargada.", "info");
            //alert("No existe informacion de notas de venta cargada.");
        }
        else {
            var iconPath = "";
            for (var i = 0; i < notas.length; i++) {
                if (notas[i].tip_nvta.trim() != 'F' && notas[i].tip_nvta.trim() != 'T') {
    
                

                if (notas[i].gps_nvta != null & notas[i].gps_nvta.trim().length > 2 & notas[i].pla_nvta.trim() == planta || planta == 'Todas') {
                    //si esta seleccionado el check de presencia (mapa de calor)entra al if
                    if (pre) {

                        if ((determinarMuestreoMarker(notas[i], formaGraficar)) & notas[i].tiprut_nvta.trim != 'B') {
                            switch (notas[i].tip_nvta.trim()) {
                                case "C":
                                    ptosLatLong = notas[i].gps_nvta.split(' ');
                                    if (ptosLatLong.length == 2) {
                                        heatMapDataCil.push(new google.maps.LatLng(parseFloat(ptosLatLong[0]), parseFloat(ptosLatLong[1])));
                                        point = new google.maps.LatLng(parseFloat(ptosLatLong[0]), parseFloat(ptosLatLong[1]));
                                    }

                                    break;
                                case "E":
                                    ptosLatLong = notas[i].gps_nvta.split(' ');
                                    if (ptosLatLong.length == 2) {
                                        heatMapDataEst.push(new google.maps.LatLng(parseFloat(ptosLatLong[0]), parseFloat(ptosLatLong[1])));
                                        point = new google.maps.LatLng(parseFloat(ptosLatLong[0]), parseFloat(ptosLatLong[1]));
                                    }
                                    break;
                            }
                        }
                    }
                    else {
                        if (determinarMuestreoMarker(notas[i], formaGraficar)) {
                            ptosLatLong = notas[i].gps_nvta.split(' ');
                            //determinar el icono a usar
                            switch (formaGraficar) {
                                case "MEDIO DE PEDIDO":
                                    iconPath = "/Images/PEDIDO_" + notas[i].tip_nvta.trim() + "_" + notas[i].tpdo_nvta.trim() + ".png";
                                    break;
                                case "USO DE PEDIDO":
                                    iconPath = "/Images/USO_" + notas[i].uso_nvta.trim() + "_" + notas[i].tpdo_nvta.trim() + ".png";
                                    break;

                                case "SERVICIO EST/CIL":

                                    switch (notas[i].tip_nvta.trim()) {
                                        case "C":
                                            iconPath = "/Images/PEDIDO_" + notas[i].tip_nvta.trim() + "_C.png";
                                            break;
                                        case "E":
                                            iconPath = "/Images/PEDIDO_" + notas[i].tip_nvta.trim() + "_L.png";
                                            break;

                                    }

                                    break;
                                case "ASISTENCIA":
                                    iconPath = "/Images/ASISTENCIA_" + notas[i].tiprut_nvta.trim() + "_" + notas[i].asiste_nvta.trim() + ".png";
                                    break;
                                default:
                            }

                            // si se muestran las rutas se colocan iconos con color para diferenciar las plantas

                            if (planta == 'Todas') {

                                for (var m = 0; m < icon_planta.length; m++) {
                                    //icon_planta.push({ indiceColor: index_icon, planta: arr_valores[1].trim() });
                                    if (icon_planta[m].planta.trim() == notas[i].pla_nvta.trim()) {

                                        switch (notas[i].tiprut_nvta.trim()) {
                                            case "C":
                                                iconPath = "/Images/PLANTA_" + icon_planta[m].indiceColor + "_C.png";
                                                break;

                                            case "M":
                                                iconPath = "/Images/PLANTA_" + icon_planta[m].indiceColor + "_M.png";
                                                break;

                                        }
                                        break;

                                    }


                                }


                            }

                            var marker = new google.maps.Marker({
                                position: { lat: parseFloat(ptosLatLong[0]), lng: parseFloat(ptosLatLong[1]) },
                                map: map,
                                title: 'PLANTA:' + notas[i].pla_nvta + 'RUTA:' + notas[i].ruta_nvta + '  L/kg:' + notas[i].tlts_nvta + '  IMPORTE:' + notas[i].impt_nvta + ' FECHA:' + notas[i].fes_nvta,
                                icon: iconPath,
                                html: ''
                            });
                            point = new google.maps.LatLng(parseFloat(ptosLatLong[0]), parseFloat(ptosLatLong[1]));

                            arr_marcadores.push(marker);
                            // crear informacion para mostrar en un evento del marcador
                            var infoWindow = new google.maps.InfoWindow();
                        }

                    }

                }
                // agregale evento clik
                // google.maps.event.addListener(marker, 'click', function () {
                //infoWindow.setContent(marker.html);
                //  infoWindow.open(map, marker);
            }
            }
            // centrar el mapa en el punto de venta

            map.setCenter(point);

            if (pre) {
                // agregar el heatmap de cilindros
                heatmapcil = new google.maps.visualization.HeatmapLayer({
                    data: heatMapDataCil,
                    radius: 20,
                });
                // heatmapcil.set('gradient',  gradientCil);
                heatmapcil.setMap(map);

                // agregar el heatmap de estacionarios
                heatmapest = new google.maps.visualization.HeatmapLayer({
                    data: heatMapDataEst,
                    radius: 20,
                });
                heatmapest.set('gradient', gradientEst);
                heatmapest.setMap(map);

                arr_heatmap.push(heatmapcil);
                arr_heatmap.push(heatmapest);


            }
        }

        // quita los marcadores actuales
        function limpiarMarcadores() {
            for (var i = 0; i < arr_marcadores.length; i++) {
                arr_marcadores[i].setMap(null);

            };

            arr_marcadores = [];

        }
        // quita los heatmaps actuales actuales
        function limpiarHeatmaps() {
            for (var i = 0; i < arr_heatmap.length; i++) {
                arr_heatmap[i].setMap(null);
            };

            arr_heatmap = [];

        }


    }
    // determina si el marcador sera mostrado o no
    function determinarMuestreoMarker(nota, formaGraficar) {
        var mostrar = false;
        switch (formaGraficar) {
            case "MEDIO DE PEDIDO":
                switch (nota.tiprut_nvta.trim()) {
                    case "C":
                        if (cil) {
                            switch (nota.tpdo_nvta.trim()) {
                                case "C":
                                    if (cll)
                                        return true;
                                    break;
                                case "L":
                                    if (ccr)
                                        return true;
                                    break;
                                case "P":
                                    if (pro)
                                        return true;
                                    break;
                                case "S":
                                    if (pxs)
                                        return true;
                                    break;
                                case "A":
                                    if (app)
                                        return true;
                                    break;
                                case "E":
                                    if (est)
                                        return true;
                                    break;
                                case "W":
                                    if (web)
                                        return true;
                                    break;
                                case "F":
                                    if (cf)
                                        return true;
                                    break;

                            }
                        }
                        break;
                    case "M":
                        if (est) {
                            switch (nota.tpdo_nvta.trim()) {
                                case "C":
                                    if (cll)
                                        return true;
                                    break;
                                case "L":
                                    if (ccr)
                                        return true;
                                    break;
                                case "P":
                                    if (pro)
                                        return true;
                                    break;
                                case "S":
                                    if (pxs)
                                        return true;
                                    break;
                                case "A":
                                    if (app)
                                        return true;
                                    break;
                                case "E":
                                    if (est)
                                        return true;
                                    break;
                                case "W":
                                    if (web)
                                        return true;
                                    break;
                                case "F":
                                    if (cf)
                                        return true;
                                    break;
                            }
                            break;
                        }
                        break;
                }
                return false;
            case "USO DE PEDIDO":
                switch (nota.tip_nvta.trim()) {
                    case "C":
                        if (cil) {
                            switch (nota.uso_nvta.trim()) {
                                case "1":
                                    if (dom)
                                        return true;
                                    break;
                                case "2":
                                    if (com)
                                        return true;
                                    break;
                                case "3":
                                    if (ind)
                                        return true;
                                    break;
                                case "4":
                                    if (ser)
                                        return true;
                                    break;
                                case "5":
                                    if (car)
                                        return true;
                                    break;
                                case "6":
                                    if (gra)
                                        return true;
                                    break;
                                case "7":
                                    if (tor)
                                        return true;
                                    break;
                                case "8":
                                    if (pan)
                                        return true;
                                    break;
                                case "9":
                                    if (exj)
                                        return true;
                                    break;
                                case "10":
                                    if (pgs)
                                        return true;
                                    break;

                            }
                        }
                        break;
                    case "E":
                        if (est) {
                            switch (nota.uso_nvta.trim()) {
                                case "1":
                                    if (dom)
                                        return true;
                                    break;
                                case "2":
                                    if (com)
                                        return true;
                                    break;
                                case "3":
                                    if (ind)
                                        return true;
                                    break;
                                case "4":
                                    if (ser)
                                        return true;
                                    break;
                                case "5":
                                    if (car)
                                        return true;
                                    break;
                                case "6":
                                    if (gra)
                                        return true;
                                    break;
                                case "7":
                                    if (tor)
                                        return true;
                                    break;
                                case "8":
                                    if (pan)
                                        return true;
                                    break;
                                case "9":
                                    if (exj)
                                        return true;
                                    break;
                                case "10":
                                    if (pgs)
                                        return true;
                                    break;

                            }
                            break;
                        }
                        break;
                }
                break;
            case "SERVICIO EST/CIL":
                switch (nota.tiprut_nvta.trim()) {
                    case "C":
                        if (cil)
                            return true;
                        break;
                    case "M":
                        if (est)
                            return true;
                        break;
                }
                break;
            case "ASISTENCIA":
                switch (nota.tiprut_nvta.trim()) {
                    case "C":
                        if (cil)
                            return true;
                        break;
                    case "M":
                        if (est)
                            return true;
                        break;
                }
                break;
            default:
        }
        return false;
    }
    // guarda en una coleccion los servidores que el usuario podria consultar
    function guardaServidores() {
        var existe = false;
        for (var i = 0; i < geocercas.length; i++) {

            for (var j = 0; j < servidores.length; j++) {
                if (geocercas[i].srv_geo.trim() == servidores[j].trim())
                    existe = true;
            }

            if (!existe) {
                servidores.push(geocercas[i].srv_geo.trim());

            }
            existe = false;


        }
        // agregar los servidores al selec para uausuario admin
        for (var k = 0; k < servidores.length; k++) {
            var x = document.getElementById("select_servidores");
            var option = document.createElement("option");
            option.text = servidores[k].trim();
            x.add(option);

        }

    }
    // agrega los servidores que el usuario admin ocupara
    function agregaServidor() {
        var serverSeleccionado = $("#select_servidores option:selected").text();
        var valoresActual = document.getElementById("input_servidores").value;
        document.getElementById("input_servidores").value = valoresActual + "'" + serverSeleccionado + "',";
    }
    // muestra un dialogo con el formulario para buscar una colonia en el mapa
    function dialogBuscarColonia() {
        cierraDialog();
        muestraDialog('buscarColonina');
        //var msg = document.getElementById('buscarColonina');
        //msg.showModal();
        //dialogos.push(msg);
    }
    function dialogDibujarColonia() {
        cierraDialog();
        muestraDialog('resultados_Coloninas');
        //var msg = document.getElementById('resultados_Coloninas');
        //msg.showModal();
        //dialogos.push(msg);
    }
     //Cierra el dialogo que este mostrandoce en el momento
    function cierraDialog() {
        for (var i = 0; i < dialogos.length; i++) {
            dialogos[i].close();
        }
        dialogos = [];
        document.getElementById('prvMapa').style.display = "none";
    }
    function buscarColonia() {
        google.setOnLoadCallback(buscarColonia2);
        buscarColonia2();
    }
    function buscarColonia2() {
        var edo = $("#select_estados option:selected").text();
        var indiceI;
        var indiceS;

        for (var i = 0; i < edosIndices.length; i++) {
            if (edo == edosIndices[i].edo_geo) {
                indiceI = edosIndices[i].min_ind;
                indiceS = edosIndices[i].max_ind;
                break;
            }
        }




        var colonia = document.getElementById('txtcolonia').value.toLocaleUpperCase();
        $.ajax({
            type: "POST",
            url: "/Home/getColonias/",
            data: { paramDescrip: colonia, paramEdo: edo, paramString1: indiceI + ',' + indiceS },
            datatype: "json",
            success: function (data) {

                if (data != null) {
                    // creacion de la tabla
                    var tablaColonias = new google.visualization.DataTable();
                    tablaColonias.addColumn('string', 'CODIGO POSTAL');
                    tablaColonias.addColumn('string', 'ESTADO');
                    tablaColonias.addColumn('string', 'MUNICIPIO');
                    tablaColonias.addColumn('string', 'NOMBRE');
                    tablaColonias.addColumn('string', 'TIPO');
                    tablaColonias.addColumn('string', 'GRAFICAR');
                    //se llena la tabla con los datos de la consulta
                    for (var i = 0; i < data.length; i++) {
                        tablaColonias.addRow([
                            data[i].postalcode,
                            data[i].st_name,
                            data[i].mun_name,
                            data[i].sett_name,
                            data[i].sett_type,
                            '<input type="button" style="border-color: transparent;" value="GRAFICAR" onclick=\"graficarColonia(\'' + data[i].geometry + '\',\'' + data[i].postalcode + '\',\'' + data[i].sett_name + '\')\" />'
                        ]);
                    }
                    //agregar la tabla al div correspondiente de la paguina HTML
                    var contenedor = new google.visualization.Table(tblColonias);
                    // AGREGAR IMPLEMENTACIONES DE HTML EN LAS CELDAS DE LA TABLA Y PRECENTAR NUMERACION DE REGISTROS
                    contenedor.draw(tablaColonias, { allowHtml: true, showRowNumber: true });
                    //AGREGAR EVENTO DE CLIC EN EL REGISTRO DE LA TABLA
                    google.visualization.events.addListener(contenedor, 'select', function () {

                        //var row = table3.getSelection()[0].row

                    });

                   cierraDialog();
                    dialogDibujarColonia()

                }
                else {
                    mensajeSweet("Ooops", "No se encontro la localidad con el criterio buscado", "info");
                    //alert("No se encontro la localidad con el criterio buscado");
                }
            },
            error: function (request, status, error) {
                mensajeSweet("Ooops", request.responseText, "error");
                //alert(request.responseText);
            }
        });
    }
    //grafica la colona seleccionada
    function graficarColonia(puntos, codigo, col) {

        cierraDialog();
        quitarcolonias();
        arr_colonias = [];
        var puntos_geo = puntos.trim();
        var coordenadas = puntos_geo.split('),(');
        var poligon = [];
        var lonlat;
        // obtener las coredenadas en areglo
        for (var j = 0; j < coordenadas.length; j++) {
            coordenadas[j] = coordenadas[j].replace('(', '');
            coordenadas[j] = coordenadas[j].replace(')', '');
            lonlat = coordenadas[j].split(",");
            poligon.push(new google.maps.LatLng(parseFloat(lonlat[0]), parseFloat(lonlat[1])));
            point = new google.maps.LatLng(parseFloat(lonlat[0]), parseFloat(lonlat[1]));
        }
        map.setCenter(point);
        // Contruccion del la geocerca
        var geopoligon = new google.maps.Polygon({
            paths: poligon,
            strokeColor: '#FF0000',
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: '#FF0000',
            //fillColor: geocercas[i].color_geo.trim(),
            fillOpacity: 0.7,
            title: 'Codigo Postal' + codigo + ' Colonia:' + col,
            html: 'Codigo Postal: ' + codigo + ' Colonia: ' + col
        });
        geopoligon.setMap(map);
        arr_colonias.push(geopoligon);
        infoWindowG = new google.maps.InfoWindow();
        google.maps.event.addListener(geopoligon, 'click', MuestraInfoCol);

    }
    // muestra los estados en un control select
    function agregaEstados() {
        document.getElementById("select_estados").length = 0;
        for (var i = 0; i < edosIndices.length; i++) {
            var x = document.getElementById("select_estados");
            var option = document.createElement("option");
            option.text = edosIndices[i].edo_geo;
            x.add(option);
        }
    }
    //quita las colonias actuales en el mapa
    function quitarcolonias() {
        if (arr_colonias.length > 0) {
            for (var i = 0; i < arr_colonias.length; i++) {
                arr_colonias[i].setMap(null);
            }
        }
        arr_colonias = [];


    }
    // MUESTRA INFORMACION DE UNA COLONIA AL REALIZAR UN CLIC con reespecto a las notas de venta;
    function MuestraInfoCol(event) {
        infoWindowG.setContent(this.html);
        infoWindowG.setPosition(event.latLng);
        infoWindowG.open(map);
        if (document.getElementById('checNegocios').checked) {
            getNegocios(event.latLng);
        }
        else {
        var servidor = document.getElementById("serv").innerHTML;
        var fecha_ini = document.getElementById("fecha_ini").value;
        var fecha_fin = document.getElementById("fecha_fin").value;
        document.getElementById("titulo_graficas").innerHTML = 'Servidor: ' + servidor + ' Tipo de poligono: Col/fracc Descripcion: ' + this.title + ' Fechas: ' + fecha_ini + ' a ' + fecha_fin;

        var formaInfo = $("#forma_pedido option:selected").text();

        notas_analisis = [];
        if (notas != null) {
            if (notas.length > 0) {
                for (var i = 0; i < notas.length; i++) {
                    if (notas[i].gps_nvta != null & notas[i].gps_nvta.trim().length > 2) {
                        var putosgps = notas[i].gps_nvta.trim().split(' ');
                        var point1 = new google.maps.LatLng(parseFloat(putosgps[0].trim()), parseFloat(putosgps[1].trim()));
                        if ((google.maps.geometry.poly.containsLocation(point1, arr_colonias[0]) & planta.trim() == notas[i].pla_nvta.trim()) || (planta == 'Todas' & google.maps.geometry.poly.containsLocation(point1, arr_colonias[0])))
                            if (determinarMuestreoMarker(notas[i], formaInfo))
                                notas_analisis.push(notas[i]);
                    }
                }
                analizaArea(notas_analisis);
            }
            else {
                confirm("No contienes notas para realizar el analisis");
            }

        }
        else {
            confirm("No contienes notas para realizar el analisis");
        }
    }
    }
    // evento al final de dibujar un poligono
    function finDraw(event) {
        //heandPoligons
        var nombre_ruta = $("#rutas option:selected").text().trim();
        var servidor = document.getElementById("serv").innerHTML;
        var fecha_ini = document.getElementById("fecha_ini").value;
        var fecha_fin = document.getElementById("fecha_fin").value;
        document.getElementById("titulo_graficas").innerHTML = 'Servidor: ' + servidor + ' Tipo de poligono: Poligono Libre  Descripcion: ' + this.title + ' Fechas: ' + fecha_ini + ' a ' + fecha_fin;
        var formaInfo = $("#forma_pedido option:selected").text();
        var ped_rut = $("#accion option:selected").text();
        // limpiar el poligono anterior
        for (var i = 0; i < heandPoligons.length; i++) {
            heandPoligons[i].setMap(null);
        }
        heandPoligons.push((event.overlay));
        poligonoLibre = event.overlay.getPath().getArray();
        //alert(poligonoLibre);
        polygonDrawin = new google.maps.Polygon({ path: new google.maps.MVCArray(event.overlay.getPath().getArray()) });
        notas_analisis = [];
        if (notas != null) {
            if (notas.length > 0) {
                if (ped_rut == "PEDIDOS") {
                    for (var i = 0; i < notas.length; i++) {
                        if (notas[i].gps_nvta != null && notas[i].gps_nvta.trim().split(' ').length >= 2) {
                            var putosgps = notas[i].gps_nvta.trim().split(' ');
                            var point1 = new google.maps.LatLng(parseFloat(putosgps[0].trim()), parseFloat(putosgps[1].trim()));
                            if ((google.maps.geometry.poly.containsLocation(point1, polygonDrawin) & planta.trim() == notas[i].pla_nvta.trim()) || (planta == 'Todas' & google.maps.geometry.poly.containsLocation(point1, polygonDrawin)))
                                if (determinarMuestreoMarker(notas[i], formaInfo))
                                    notas_analisis.push(notas[i]);
                        }

                    }
                }
                else {
                    for (var i = 0; i < notasRuta.length; i++) {
                        if (notasRuta[i].gps_nvta != null && notasRuta[i].gps_nvta.trim().split(' ').length > 2) {
                            var putosgps = notasRuta[i].gps_nvta.trim().split(' ');
                            var point1 = new google.maps.LatLng(parseFloat(putosgps[0].trim()), parseFloat(putosgps[1].trim()));
                            if (google.maps.geometry.poly.containsLocation(point1, polygonDrawin) & planta.trim() == notasRuta[i].pla_nvta.trim())
                                if (determinarMuestreoMarker(notasRuta[i], formaInfo))
                                    notas_analisis.push(notasRuta[i]);
                        }

                    }
                }

                analizaArea(notas_analisis);
            }
            else {
                confirm("No contienes notas para realizar el analisis");
            }

        }
        else {
            confirm("No contienes notas para realizar el analisis");
        }
    }
    //grafica la venta de kilos por tipo de servicio
    function muestraGraficaServiciosVtaKg(notas) {

        var cil_vtakg = 0
        var cil_otroskg = 0;
        var cil_vtaNotas = 0
        var cil_otrosNotas = 0;
        var est_vtakg = 0
        var est_otroskg = 0;
        var est_vtaNotas = 0
        var est_otrosNotas = 0;
        for (var i = 0; i < notas.length; i++) {
            if (notas[i].tiprut_nvta.trim() == 'C') {
                switch (notas[i].tip_nvta.trim()) {
                    case "B":
                        cil_vtakg = cil_vtakg + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                        cil_vtaNotas++;
                        break;
                    case "C":
                        cil_vtakg = cil_vtakg + parseFloat(notas[i].tlts_nvta.trim());
                        cil_vtaNotas++;
                        break;
                    case "E":
                        cil_vtakg = cil_vtakg + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                        cil_vtaNotas++;
                        break;
                    default:
                        cil_otroskg = cil_otroskg + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                        cil_otrosNotas++;

                        break;

                }

            }


            if (notas[i].tiprut_nvta.trim() == 'M') {
                switch (notas[i].tip_nvta.trim()) {
                    case "B":
                        est_vtakg = est_vtakg + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                        est_vtaNotas++;
                        break;
                    case "C":
                        est_vtakg = est_vtakg + parseFloat(notas[i].tlts_nvta.trim());
                        est_vtaNotas++;
                        break;
                    case "E":
                        est_vtakg = est_vtakg + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                        est_vtaNotas++;
                        break;
                    default:
                        est_otroskg = est_otroskg + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                        est_otrosNotas++;
                        break;

                }
            }


        }



        var data = google.visualization.arrayToDataTable([
          ['Servicio', 'Cantidad de notas'],
          ['Est vta ' + est_vtakg.toFixed(2) + ' kgs', est_vtakg],
          ['Cil vta ' + cil_vtakg.toFixed(2) + ' kgs', cil_vtakg],
          ['Est otros ' + est_otroskg.toFixed(2) + ' kgs', est_otroskg],
          ['Cil otros ' + cil_otroskg.toFixed(2) + ' kgs', cil_otroskg],

        ]);

        var options = {
            width: 700,
            height: 450,
            title: 'GRAFICA DE DESGLOSE VTA KGS POR SERVICIO',
            focusTarget: 'category',
            hAxis: {
                title: 'TIPO DE SERVICIO',
                format: 'h:mm a',
                viewWindow: {
                    //min: [7, 30, 0],
                    //max: [17, 30, 0]
                }



            }
        };

        var chart = new google.visualization.PieChart(document.getElementById('grfVtaTipSer'));
        chart.draw(data, options);
    }
    // grafica para representar la informacion de servicio de estacionario y cilindro
    function muestraGraficaServicios(notas) {
        var est = 0;
        var cil = 0;
        for (var i = 0; i < notas.length; i++) {
            if (notas[i].tiprut_nvta.trim() == 'C')
                cil++;
            if (notas[i].tiprut_nvta.trim() == 'M')
                est++;
        }
        var data = google.visualization.arrayToDataTable([
          ['Servicio', 'Cantidad de notas'],
          ['Est ' + est + ' Notas', est],
          ['Cil ' + cil + ' Notas', cil],

        ]);

        var options = {
            width: 700,
            height: 450,
            title: 'GRAFICA DE DESGLOSE DE TIPOS DE SERVICIOS',
            focusTarget: 'category',
            hAxis: {
                title: 'TIPO DE SERVICIO',
                format: 'h:mm a',
                viewWindow: {

                }



            }
        };

        var chart = new google.visualization.PieChart(document.getElementById('grfTipServ'));
        chart.draw(data, options);
    }
    // grafica para representar la informacion del tipo de uso
    function muestraGraficaUsos(notas) {

        var dom = 0, com = 0, ind = 0, ser = 0, carb = 0, gra = 0, tor = 0, pan = 0, exj = 0, plg = 0;

        for (var i = 0; i < notas.length; i++) {
            switch (notas[i].uso_nvta.trim()) {
                case "1":
                    dom++;
                    break;
                case "2":
                    com++;
                    break;
                case "3":
                    ind++;
                    break;
                case "4":
                    ser++;
                    break;
                case "5":
                    carb++;
                    break;
                case "6":
                    gra++;
                    break;
                case "7":
                    tor++;
                    break;
                case "8":
                    pan++;
                    break;
                case "9":
                    exj++;
                    break;
                case "10":
                    plg++;
                    break;

            }

        }

        var valores = [];
        valores.push({ desc: 'Dom:', valor: dom });
        valores.push({ desc: 'Com:', valor: com });
        valores.push({ desc: 'Ind:', valor: ind });
        valores.push({ desc: 'Ser:', valor: ser });
        valores.push({ desc: 'Car:', valor: carb });
        valores.push({ desc: 'Gra:', valor: gra });
        valores.push({ desc: 'Tor:', valor: tor });
        valores.push({ desc: 'Pan:', valor: pan });
        valores.push({ desc: 'Ext:', valor: exj });
        valores.push({ desc: 'Pgs:', valor: plg });


        var porcentajes = [];


        var data = new google.visualization.DataTable();
        data.addColumn('string', 'FORMA DE PEDIDO');
        porcentajes.push('');
        for (var i = 0; i < valores.length; i++) {

            if (valores[i].valor != 0) {
                data.addColumn('number', valores[i].desc + ' ' + ((valores[i].valor * 100) / notas.length).toFixed(2) + '%');
                porcentajes.push(valores[i].valor);
            }


        }
        data.addRows([porcentajes]);
        var options = {
            width: 700,
            height: 450,
            title: 'GRAFICA DE DESGLOSE DE USO DE SERVICIOS',
            focusTarget: 'category',
            hAxis: {
                title: 'TIPOS DE USOS',
                // format: 'h:mm a',
                viewWindow: {
                    //min: [7, 30, 0],
                    //max: [17, 30, 0]
                },
                textStyle: {
                    fontSize: 14,
                    color: '#053061',
                    bold: true,
                    italic: false
                },
                titleTextStyle: {
                    fontSize: 18,
                    color: '#053061',
                    bold: true,
                    italic: false
                }
            },
            vAxis: {
                title: 'No Notas',
                textStyle: {
                    fontSize: 18,
                    color: '#67001f',
                    bold: false,
                    italic: false,

                },
                titleTextStyle: {
                    fontSize: 18,
                    color: '#67001f',
                    bold: true,
                    italic: false
                }
            }
        };

        var chart = new google.visualization.ColumnChart(document.getElementById('grfUsoNvta'));
        chart.draw(data, options);
    }
    // muestra la cantidada de servicios solicitados por dia de la semeana
    function muestraGraficaVtaDiaSem(notas) {

        // variables dias de la semana
        var lun = 0, mar = 0, mie = 0, jue = 0, vie = 0, sab = 0, dom = 0;
        var luns = 0, mars = 0, mies = 0, jues = 0, vies = 0, sabs = 0, doms = 0;

        for (var i = 0; i < notas.length; i++) {
            //  dias de la semena
            if ((notas[i].tip_nvta.trim() == 'E' || notas[i].tip_nvta.trim() == 'C' || notas[i].tip_nvta.trim() == 'B')) {
                if (notas[i].tpdo_nvta.trim() != 'C') {
                    switch (notas[i].dia_semana.trim()) {
                        case "0":
                            dom++;
                            break;
                        case "1":
                            lun++;
                            break;
                        case "2":
                            mar++;
                            break;
                        case "3":
                            mie++;
                            break;
                        case "4":
                            jue++;
                            break;
                        case "5":
                            vie++;
                            break;
                        case "6":
                            sab++;
                            break;

                    }

                }


                switch (notas[i].dia_semana_sur.trim()) {
                    case "0":
                        doms++;
                        break;
                    case "1":
                        luns++;
                        break;
                    case "2":
                        mars++;
                        break;
                    case "3":
                        mies++;
                        break;
                    case "4":
                        jues++;
                        break;
                    case "5":
                        vies++;
                        break;
                    case "6":
                        sabs++;
                        break;

                }
            }

        }
        //grfAnalisisDiaSemanaSur
        // grafica dia de la semena pedido surtido
        var valores2 = [];
        valores2.push({ desc: 'Dom:', valor: doms });
        valores2.push({ desc: 'Lun:', valor: luns });
        valores2.push({ desc: 'Mar:', valor: mars });
        valores2.push({ desc: 'Mie:', valor: mies });
        valores2.push({ desc: 'Jue:', valor: jues });
        valores2.push({ desc: 'Vie:', valor: vies });
        valores2.push({ desc: 'Sab:', valor: sabs });



        var porcentajes2 = [];


        var data2 = new google.visualization.DataTable();
        data2.addColumn('string', 'FORMA DE PEDIDO');
        porcentajes2.push('');
        for (var i = 0; i < valores2.length; i++) {

            if (valores2[i].valor != 0) {
                data2.addColumn('number', valores2[i].desc + ' ' + ((valores2[i].valor * 100) / notas.length).toFixed(2) + '%');
                porcentajes2.push(valores2[i].valor);
            }


        }
        data2.addRows([porcentajes2]);
        var options2 = {
            width: 700,
            height: 450,
            title: 'SERVICIOS SURTIDOS POR DIA DE LA SEMANA',
            focusTarget: 'category',
            hAxis: {
                title: 'DIAS DE LA SEMANA',
                // format: 'h:mm a',
                viewWindow: {
                    //min: [7, 30, 0],
                    //max: [17, 30, 0]
                },
                textStyle: {
                    fontSize: 14,
                    color: '#053061',
                    bold: true,
                    italic: false
                },
                titleTextStyle: {
                    fontSize: 18,
                    color: '#053061',
                    bold: true,
                    italic: false
                }
            },
            vAxis: {
                title: 'No Notas',
                textStyle: {
                    fontSize: 18,
                    color: '#67001f',
                    bold: false,
                    italic: false,

                },
                titleTextStyle: {
                    fontSize: 18,
                    color: '#67001f',
                    bold: true,
                    italic: false
                }
            }
        };

        var chart2 = new google.visualization.ColumnChart(document.getElementById('grfAnalisisDiaSemanaSur'));
        chart2.draw(data2, options2);
        //grafica dia de la semena (pedido solicitado)
        var valores = [];
        valores.push({ desc: 'Dom:', valor: dom });
        valores.push({ desc: 'Lun:', valor: lun });
        valores.push({ desc: 'Mar:', valor: mar });
        valores.push({ desc: 'Mie:', valor: mie });
        valores.push({ desc: 'Jue:', valor: jue });
        valores.push({ desc: 'Vie:', valor: vie });
        valores.push({ desc: 'Sab:', valor: sab });



        var porcentajes = [];


        var data = new google.visualization.DataTable();
        data.addColumn('string', 'FORMA DE PEDIDO');
        porcentajes.push('');
        for (var i = 0; i < valores.length; i++) {

            if (valores[i].valor != 0) {
                data.addColumn('number', valores[i].desc + ' ' + ((valores[i].valor * 100) / notas.length).toFixed(2) + '%');
                porcentajes.push(valores[i].valor);
            }


        }
        data.addRows([porcentajes]);
        var options = {
            width: 700,
            height: 450,
            title: 'SERVICIOS POR DIA DE LA SEMANA',
            focusTarget: 'category',
            hAxis: {
                title: 'DIAS DE LA SEMANA',
                // format: 'h:mm a',
                viewWindow: {
                    //min: [7, 30, 0],
                    //max: [17, 30, 0]
                },
                textStyle: {
                    fontSize: 14,
                    color: '#053061',
                    bold: true,
                    italic: false
                },
                titleTextStyle: {
                    fontSize: 18,
                    color: '#053061',
                    bold: true,
                    italic: false
                }
            },
            vAxis: {
                title: 'No Notas',
                textStyle: {
                    fontSize: 18,
                    color: '#67001f',
                    bold: false,
                    italic: false,

                },
                titleTextStyle: {
                    fontSize: 18,
                    color: '#67001f',
                    bold: true,
                    italic: false
                }
            }
        };

        var chart = new google.visualization.ColumnChart(document.getElementById('grfAnalisisDiaSemana'));
        chart.draw(data, options);
    }
    // grafica para representar la informacion del tipo de uso
    function muestraGraficaFormaPedido(notas) {


        var app = 0, call = 0, clr = 0, pro = 0, pxs = 0, enc = 0, web = 0;

        for (var i = 0; i < notas.length; i++) {
            switch (notas[i].tpdo_nvta.trim()) {
                case "A":
                    app++;
                    break;
                case "C":
                    call++;
                    break;
                case "L":
                    clr++;
                    break;
                case "P":
                    pro++;
                    break;
                case "S":
                    pxs++;
                    break;
                case "E":
                    enc++;
                    break;
                case "W":
                    web++;
                    break;


            }

        }





        var valores = [];

        valores.push({ desc: 'App:', valor: app });
        valores.push({ desc: 'Cal:', valor: call });
        valores.push({ desc: 'CCe:', valor: clr });
        valores.push({ desc: 'Pro:', valor: pro });
        valores.push({ desc: 'Pxs:', valor: pxs });
        valores.push({ desc: 'Enc:', valor: enc });
        valores.push({ desc: 'Wha:', valor: web });



        var porcentajes = [];


        var data = new google.visualization.DataTable();
        data.addColumn('string', 'FORMA DE PEDIDO')
        porcentajes.push('');
        for (var i = 0; i < valores.length; i++) {

            if (valores[i].valor != 0) {
                data.addColumn('number', valores[i].desc + ' ' + ((valores[i].valor * 100) / notas.length).toFixed(2) + '%');
                porcentajes.push(valores[i].valor);
            }


        }
        data.addRows([porcentajes]);

        var options = {
            width: 700,
            height: 450,
            title: 'GRAFICA DE DESGLOSE DE FORMA DE PEDIDO',
            focusTarget: 'category',
            hAxis: {
                title: 'FORMAS DE PEDIDO',

                viewWindow: {

                },
                textStyle: {
                    fontSize: 14,
                    color: '#053061',
                    bold: true,
                    italic: false
                },
                titleTextStyle: {
                    fontSize: 18,
                    color: '#053061',
                    bold: true,
                    italic: false
                }
            },
            vAxis: {
                title: 'No Notas',
                textStyle: {
                    fontSize: 18,
                    color: '#67001f',
                    bold: false,
                    italic: false
                },
                titleTextStyle: {
                    fontSize: 18,
                    color: '#67001f',
                    bold: true,
                    italic: false
                }
            }
        };

        var chart = new google.visualization.ColumnChart(document.getElementById('grfFormPed'));
        chart.draw(data, options);
    }
    // obtiene las notas que no tienen GPS
    function getNotasSinGPS(notas) {
        var notasConGps = 0;
        for (var i = 0; i < notas.length; i++)
        {
            if (document.getElementById('hiddenPla').value == notas[i].pla_nvta)
            {
                notasByPla.push(notas[i]);
                if (notas[i].gps_nvta.trim() == '' | notas[i].gps_nvta == null)
                    notasSinGPS.push(notas[i]);
               
                else
                    notasConGps++;
            }
          
        }
        document.getElementById("notassingps").innerHTML = 'No de notas sin GPS: ' + notasSinGPS.length;
        document.getElementById("notascongps").innerHTML = 'No de notas con GPS: ' + notasConGps;
        document.getElementById("notastotales").innerHTML = 'Total de notas : ' + notasByPla.length;

        if (notasSinGPS.length > 0) {

            //document.getElementById("btnnotassingpstoexcel").style.display = "inline";

        }
    }
    // exporta los datos a una tabla en excel
    function notasToExcel(tipoNotas) {
        //pointsInPoligon.push({ Ruta: results[i].ruta, Cliente: results[i].cte, Litros: results[i].Lts, Direccion: results[i].direccion, TPDO: results[i].tpdo });
        var csvRows = [['Servidor', 'Folio', 'Folio fisico', 'Gerencia', 'Planta', 'Pedido', 'No Cliente', 'No Tanque', 'Ruta', 'Tipo nota', 'Tipo ruta', 'Uso', 'fep_nvta', 'fes_nvta', 'Liquida', 'Estado nota', 'Tipo servicio', 'nept_nvta', 'Totoal l/k', 'Producto', 'Precio producto', 'Importe nota', 'Tipo producto', 'Asistencia', 'Importe asistencia', 'gps', 'Golpe', 'Economico', 'Fecha surtido', 'chofer']];
        if (tipoNotas == 'sinGPS')
            var notas = notasSinGPS;
        else
            var notas = notas_analisis;

        for (var i = 0; i < notas.length; ++i) {
            csvRows.push([notas[i].srv_nvta,
                         notas[i].fol_nvta,
                         notas[i].ffis_nvta,
                         notas[i].cia_nvta,
                         notas[i].pla_nvta,
                         notas[i].ped_nvta,
                         notas[i].numcte_nvta,
                         notas[i].numtqe_nvta,
                         notas[i].ruta_nvta,
                         notas[i].tip_nvta,
                         notas[i].tiprut_nvta,
                         notas[i].uso_nvta,
                         notas[i].fep_nvta,
                         notas[i].fes_nvta,
                         notas[i].fliq_nvta,
                         notas[i].edo_nvta,
                         notas[i].tpa_nvta,
                         notas[i].nept_nvta,
                         notas[i].tlts_nvta,
                         notas[i].tprd_nvta,
                         notas[i].pru_nvta,
                         notas[i].impt_nvta,
                         notas[i].tpdo_nvta,
                         notas[i].asiste_nvta,
                         notas[i].impasi_nvta,
                         notas[i].gps_nvta,
                         notas[i].gpe_nvta,
                         notas[i].eco_nvta,
                         notas[i].fhs_nvta,
                         notas[i].chf_nvta
            ]);
        }

        var csvString = csvRows.join("%0A"); //join("%0A")

        var a = document.createElement('a');
        a.href = 'data:attachment/csv,' + csvString;
        a.target = '_blank';
        a.download = 'pointsInpoligon_.csv';
        document.body.appendChild(a);
        a.click();
    }
    // imprimir graficas
    function imprimirDIV(contenido) {
        var ficha = document.getElementById(contenido);
        var ventanaImpresion = window.open(' ', 'popUp');
        ventanaImpresion.document.write(ficha.innerHTML);
        ventanaImpresion.document.close();
        ventanaImpresion.print();
        ventanaImpresion.close();
    }
    // grafica los puntos de  venta de una ruta en particular ya sea dentro o fuera de su poligono
    function puntosVtaRuta(ruta) {
        notasRuta = [];
        var formaGraficar = $("#forma_pedido option:selected").text();
        var ptosLatLong = []; // almcena un par de coordenadas
        var gradientCil = ['rgba(204,0,0,0.2)']; // muestra el color de presencia de  los cilindros
        var gradientEst = ['rgba(0, 255, 255, 0)', 'rgba(0, 255, 255, 1)', 'rgba(0, 191, 255, 1)', 'rgba(0, 127, 255, 1)', 'rgba(0, 63, 255, 1)', 'rgba(0, 0, 255, 1)', 'rgba(0, 0, 223, 1)', 'rgba(0, 0, 191, 1)', 'rgba(0, 0, 159, 1)', 'rgba(0, 0, 127, 1)', 'rgba(63, 0, 91, 1)', 'rgba(127, 0, 63, 1)', 'rgba(191, 0, 31, 1)', 'rgba(255, 0, 0, 1)']; // muestra el color de presencia de  los estacionarios
        var heatmapcil, heatmapest;
        heatMapDataCil.length = 0;
        heatMapDataEst.length = 0;
        //limpiarMarcadores();
        limpiarHeatmaps();
        if (notas.length <= 0) {
            mensajeSweet("Ooops", "No existe informacion de notas de venta cargada.", "info");
            //alert("No existe informacion de notas de venta cargada.");
        }
        else {
            var iconPath = "";
            for (var i = 0; i < notas.length; i++) {

                if (notas[i].gps_nvta != null & notas[i].gps_nvta.trim().length > 2 & notas[i].pla_nvta.trim() == planta & notas[i].ruta_nvta.trim() == ruta.trim()) {
                    notasRuta.push(notas[i]);
                    //si esta seleccionado el check de presencia (mapa de calor)entra al if
                    if (pre) {

                        if ((determinarMuestreoMarker(notas[i], formaGraficar)) & notas[i].tiprut_nvta.trim != 'B') {
                            switch (notas[i].tip_nvta.trim()) {
                                case "C":
                                    ptosLatLong = notas[i].gps_nvta.split(' ');
                                    heatMapDataCil.push(new google.maps.LatLng(parseFloat(ptosLatLong[0]), parseFloat(ptosLatLong[1])));
                                    break;
                                case "E":
                                    ptosLatLong = notas[i].gps_nvta.split(' ');
                                    heatMapDataEst.push(new google.maps.LatLng(parseFloat(ptosLatLong[0]), parseFloat(ptosLatLong[1])));
                                    break;
                            }
                        }
                    }
                    else {
                        if (determinarMuestreoMarker(notas[i], formaGraficar)) {
                            ptosLatLong = notas[i].gps_nvta.split(' ');
                            //determinar el icono a usar
                            switch (formaGraficar) {
                                case "MEDIO DE PEDIDO":
                                    iconPath = "/Images/PEDIDO_" + notas[i].tip_nvta.trim() + "_" + notas[i].tpdo_nvta.trim() + ".png";
                                    break;
                                case "USO DE PEDIDO":
                                    iconPath = "/Images/USO_" + notas[i].uso_nvta.trim() + "_" + notas[i].tpdo_nvta.trim() + ".png";
                                    break;

                                case "SERVICIO EST/CIL":

                                    switch (notas[i].tip_nvta.trim()) {
                                        case "C":
                                            iconPath = "/Images/PEDIDO_" + notas[i].tip_nvta.trim() + "_C.png";
                                            break;
                                        case "E":
                                            iconPath = "/Images/PEDIDO_" + notas[i].tip_nvta.trim() + "_L.png";
                                            break;

                                    }

                                    break;
                                case "ASISTENCIA":
                                    iconPath = "/Images/ASISTENCIA_" + notas[i].tiprut_nvta.trim() + "_" + notas[i].asiste_nvta.trim() + ".png";
                                    break;
                                default:
                            }

                            var marker = new google.maps.Marker({
                                position: { lat: parseFloat(ptosLatLong[0]), lng: parseFloat(ptosLatLong[1]) },
                                map: map,
                                title: 'RUTA:' + notas[i].ruta_nvta + '  L/kg:' + notas[i].tlts_nvta + '  IMPORTE:' + notas[i].impt_nvta + ' FECHA:' + notas[i].fes_nvta,
                                icon: iconPath,
                                html: ''
                            });

                            arr_marcadores.push(marker);
                            // crear informacion para mostrar en un evento del marcador
                            var infoWindow = new google.maps.InfoWindow();
                        }

                    }

                }
                // agregale evento clik
                // google.maps.event.addListener(marker, 'click', function () {
                //infoWindow.setContent(marker.html);
                //  infoWindow.open(map, marker);

            }

            if (pre) {
                // agregar el heatmap de cilindros
                heatmapcil = new google.maps.visualization.HeatmapLayer({
                    data: heatMapDataCil,
                    radius: 20,
                });
                // heatmapcil.set('gradient',  gradientCil);
                heatmapcil.setMap(map);

                // agregar el heatmap de estacionarios
                heatmapest = new google.maps.visualization.HeatmapLayer({
                    data: heatMapDataEst,
                    radius: 20,
                });
                heatmapest.set('gradient', gradientEst);
                heatmapest.setMap(map);

                arr_heatmap.push(heatmapcil);
                arr_heatmap.push(heatmapest);


            }
        }



    }
    // quita los marcadores actuales
    function limpiarMarcadores() {
        for (var i = 0; i < arr_marcadores.length; i++) {
            arr_marcadores[i].setMap(null);

        };

        arr_marcadores = [];

    }
    // quita los heatmaps actuales actuales
    function limpiarHeatmaps() {
        for (var i = 0; i < arr_heatmap.length; i++) {
            arr_heatmap[i].setMap(null);
        };

        arr_heatmap = [];

    }
    // realiza una captura del mapa y la muesta en un div (aun en desarrollo)
    function previweMapa() {

       /* html2canvas($("#map"), {
            useCORS: true,
            //                        allowTaint:true,
            onrendered: function (canvas) {
                theCanvas = canvas;
                document.body.appendChild(canvas);
                var dataUrl = canvas.toDataURL();
                $("#prvMapa").attr("src", dataUrl);
                document.getElementById('prvMapa').style.display = "inline";



            }
        });*/
    }
    // quita las rutas dibujadas en el mapa
    function quitarRutas() {
        if (rutas_en_mapa.length > 0) {
            for (var i = 0; i < rutas_en_mapa.length; i++) {
                rutas_en_mapa[i].setMap(null);
            }
        }
        var txtSelec = $("#accion option:selected").text();
        if (txtSelec == 'RUTAS') {
            limpiarMarcadores();

        }
        notasRuta = [];

    }
    // muestra el dialogo de los poligonos libres
    function dialogpPoligonosLibres() {
        cierraDialog();
        muestraDialog('poligonosLibres')
        //var msg = document.getElementById('poligonosLibres');
        //msg.showModal();
        //dialogos.push(msg);

    }
    // quita  los poligonos hechos a mano
    function quitarPoligonoLibre() {
        for (var i = 0; i < heandPoligons.length; i++) {
            heandPoligons[i].setMap(null);
        }
        poligonoLibre = [];
    }
    // guarda un poligono libre en la base de datos
    function saveFreePoligon() {
        if (poligonoLibre.length > 0) {
            var txtSelec = $("#select_plantas option:selected").text();
            var valores = txtSelec.split('-');
            planta = valores[0].trim();
            var puntos = "";
            var descripcion = document.getElementById('descPoligon').value;
            if (descripcion.trim() != '') {
                // se cera la cadena con los puntos geograficos trazados
                for (var i = 0; i < poligonoLibre.length; i++) {
                    puntos = puntos + poligonoLibre[i];
                }
                if (descripcion.length > 20) {
                    mensajeSweet("Ooops", "El nombre de tu poligon no debe de rebasar los 20 caracteres.", "info");
                   // alert("El nombre de tu poligon no debe de rebasar los 20 caracteres.");
                }
                else {
                    if (planta == '' | planta == null) {
                        mensajeSweet("Ooops", "Nesesitas una planta para poder guardar el poligono.", "info");
                        //alert("Nesesitas una planta para poder guardar el poligono.");
                    }
                    else {


                        // guargar el poligono libre
                        $.ajax({
                            type: "POST",
                            url: "/Home/savePoligon/",
                            data: {
                                cia_geo: '',
                                pla_geo: planta,
                                nom_geo: descripcion,
                                tip_geo: 'PoligonoLibre',
                                rutas_geo: document.getElementById('usr').innerHTML.trim(),
                                turno_geo: '',
                                color_geo: colorGeo,
                                hraini_geo: '',
                                hrafin_geo: '',
                                fecam_geo: '',
                                puntos_geo: puntos,
                                edo_geo: 'A',
                                tipuni_geo: '',
                                srv_geo: document.getElementById('serv').innerHTML
                            },


                            datatype: "json",
                            success: function (data) {

                                if (data.length > 0) {
                                    alert(data);
                                }
                                else {
                                    mensajeSweet("Ooops", "No existen notas en los servidores consultados", "info");
                                   // alert("No existen notas en los servidores consultados");

                                }
                            },
                            error: function (request, status, error) {
                                mensajeSweet("Ooops", request.responseText, "info");
                                //alert(request.responseText);
                            }
                        });
                    }
                }



            }
            else {
                mensajeSweet("Ooops", "Coloca una descripcion a tu poligono trazasdo", "info");
                //alert("Coloca una descripcion a tu poligono trazasdo");
            }


        }
        else {
            mensajeSweet("Ooops", "No existe un poligono trazado por el usuario...", "info");
            //alert("No existe un poligono trazado por el usuario...");
        }

    }
    // consulta los poliogos libres dibujados por los usuarios
    function getPoligonosLibres() {
        $.ajax({
            type: "POST",
            url: "/Home/getPilogonosLibres/",
            data: {
                pla_geo: planta,
                rutas_geo: document.getElementById('usr').innerHTML.trim(),
                srv_geo: document.getElementById('serv').innerHTML
            },


            datatype: "json",
            success: function (data) {
                if (data == "empty") {
                    mensajeSweet("Ooops", "No contienes poligons dibujados en esta planta.", "info");
                    //alert("No contienes poligons dibujados en esta planta.");
                }
                else
                    if (data.length > 0) {
                        google.setOnLoadCallback(muestraPoligonosLibres);
                        muestraPoligonosLibres(data);
                    }
                    else {
                        mensajeSweet("Ooops", "No contienes poligons dibujados en esta planta.", "info");
                        //alert("No contienes poligons dibujados en esta planta.");

                    }
            },
            error: function (request, status, error) {
                mensajeSweet("Ooops", request.responseText, "info");
               // alert(request.responseText);
            }
        });
    }
    //muestra los poligons libres consultados en la base de datos
    function muestraPoligonosLibres(poligons) {
        var tablaPoligons = new google.visualization.DataTable();
        tablaPoligons.addColumn('string', 'Nombre');
        tablaPoligons.addColumn('string', 'Graficar');
        tablaPoligons.addColumn('string', 'Eliminar');

        //se llena la tabla con los datos de la consulta
        for (var i = 0; i < poligons.length; i++) {
            tablaPoligons.addRow([
                poligons[i].nom_geo,
                '<button  onclick=\"graficarPoligonoLibre(\'' + poligons[i].puntos_geo + '|' + poligons[i].nom_geo + '\')\" />Graficar</button>',
                '<button  onclick=\"deletePoligonoLibre(\'' + poligons[i].nom_geo + '|' + poligons[i].pla_geo + '|' + poligons[i].srv_geo + '\')\" />Eliminar</button>'
            ]);
        }
        //agregar la tabla al div correspondiente de la paguina HTML
        var contenedor = new google.visualization.Table(tablaPoligonsLibres);
        // AGREGAR IMPLEMENTACIONES DE HTML EN LAS CELDAS DE LA TABLA Y PRECENTAR NUMERACION DE REGISTROS
        contenedor.draw(tablaPoligons, { allowHtml: true, showRowNumber: true });
        //AGREGAR EVENTO DE CLIC EN EL REGISTRO DE LA TABLA
        google.visualization.events.addListener(contenedor, 'select', function () {

            //var row = table3.getSelection()[0].row

        });
        cierraDialog();
        muestraDialog('contenedorPoligonsLibres');
        //var msg = document.getElementById('contenedorPoligonsLibres');
        //msg.showModal();
        //dialogos.push(msg);



    }
    // muestra el dialog de los poligonos consultados
    function PoligonosLibresConsultados() {
        cierraDialog();
        muestraDialog('contenedorPoligonsLibres');
        //var msg = document.getElementById('contenedorPoligonsLibres');
        //msg.showModal();
        //dialogos.push(msg);
    }
    // graficar poligon libre
    function graficarPoligonoLibre(datos) {
        for (var i = 0; i < heandPoligons.length; i++) {
            heandPoligons[i].setMap(null);
        }
        heandPoligons = [];
        var valores = datos.split('|');
        var coordenadas = valores[0].trim().split(')(');
        var poligon = [];

        // graficar el poligo
        for (var j = 0; j < coordenadas.length; j++) {
            coordenadas[j] = coordenadas[j].replace('(', '');
            coordenadas[j] = coordenadas[j].replace(')', '');
            lonlat = coordenadas[j].split(",");
            poligon.push(new google.maps.LatLng(parseFloat(lonlat[0]), parseFloat(lonlat[1])));
            point = new google.maps.LatLng(parseFloat(lonlat[0]), parseFloat(lonlat[1]));
        }
        map.setCenter(point);
        // Contruccion del la geocerca
        var geopoligon = new google.maps.Polygon({
            paths: poligon,
            strokeColor: '#FF0000',
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: '#FF0000',
            //fillColor: geocercas[i].color_geo.trim(),
            fillOpacity: 0.4,
            title: valores[1],
            html: valores[1]
        });
        geopoligon.setMap(map);
        heandPoligons.push(geopoligon);
        infoWindowG = new google.maps.InfoWindow();
        google.maps.event.addListener(geopoligon, 'click', mustraInfoPoligonoLibre);



    }
    // muestra la informacion detallada sobre las notas de venta de un poligon libre
    function mustraInfoPoligonoLibre(event) {
        infoWindowG.setContent(this.html);
        infoWindowG.setPosition(event.latLng);
        infoWindowG.open(map);
        var servidor = document.getElementById("serv").innerHTML;
        var fecha_ini = document.getElementById("fecha_ini").value;
        var fecha_fin = document.getElementById("fecha_fin").value;
        document.getElementById("titulo_graficas").innerHTML = 'Servidor: ' + servidor + ' Tipo de poligono: Poligono Libre Descripcion: ' + this.title + ' Fechas: ' + fecha_ini + ' a ' + fecha_fin;
        var formaInfo = $("#forma_pedido option:selected").text();
        notas_analisis = [];
        if (notas != null) {
            if (notas.length > 0) {
                for (var i = 0; i < notas.length; i++) {
                    if (notas[i].gps_nvta != null & notas[i].gps_nvta.trim().length > 2) {
                        var putosgps = notas[i].gps_nvta.trim().split(' ');
                        var point1 = new google.maps.LatLng(parseFloat(putosgps[0].trim()), parseFloat(putosgps[1].trim()));
                        if ((google.maps.geometry.poly.containsLocation(point1, heandPoligons[0]) & planta.trim() == notas[i].pla_nvta.trim()) || (planta == 'Todas' & google.maps.geometry.poly.containsLocation(point1, heandPoligons[0])))
                            if (determinarMuestreoMarker(notas[i], formaInfo))
                                notas_analisis.push(notas[i]);
                    }
                }
                analizaArea(notas_analisis);
            }
            else {
                confirm("No contienes notas para realizar el analisis");
            }

        }
        else {
            confirm("No contienes notas para realizar el analisis");
        }

    }
    // elimina un poligon libre
    function deletePoligonoLibre(datosPoli) {
        var datos = datosPoli.split('|');

        $.ajax({
            type: "POST",
            url: "/Home/deletePologonosLibres/",
            data: {
                pla_geo: datos[1],
                nom_geo: datos[0],
                srv_geo: datos[2]
            },


            datatype: "json",
            success: function (data) {

                if (data.length == 'Poligono Eliminado correctamente') {
                    getPoligonosLibres();
                }
                else {
                    alert(data);

                }
            },
            error: function (request, status, error) {
                mensajeSweet("Ooops", request.responseText, "info");
                //alert(request.responseText);
            }
        });
    }
    //busca los municipios coicidentes con una busqueda de tipo municipio
    function buscarMunicipios() {
        var edo = $("#select_estados option:selected").text();
        var indiceI;
        var indiceS;

        for (var i = 0; i < edosIndices.length; i++) {
            if (edo == edosIndices[i].edo_geo) {
                indiceI = edosIndices[i].min_ind;
                indiceS = edosIndices[i].max_ind;
                break;
            }
        }

        // consulta  un listado de los municipios del estado en cuestion
        $.ajax({
            type: "POST",
            url: "/Home/getMunicipios/",
            data: { paramEdo: edo, paramString1: indiceI + ',' + indiceS },
            datatype: "json",
            success: function (data) {

                if (data != null) {

                    google.setOnLoadCallback(muestraMunicipios);
                    muestraMunicipios(data);


                }
                else {
                    mensajeSweet("Ooops", "No se encontro la localidad con el criterio buscado", "info");
                    //alert("No se encontro la localidad con el criterio buscado");
                }
            },
            error: function (request, status, error) {
                mensajeSweet("Ooops", request.responseText, "info");
                //alert(request.responseText);
            }
        });

        // consulta la informacion geografica de los municipios
        for (var i = 0; i < edosIndices.length; i++) {
            if (edo == edosIndices[i].edo_geo) {
                claveEnt = edosIndices[i].cve_ent;
                break;
            }
        }

        $.ajax({
            type: "POST",
            url: "/Home/todoslosMunicipios/",
            data: { paramEdo: edo, paramString1: claveEnt },
            datatype: "json",
            success: function (data) {

                if (data != null) {
                    arr_municipios = data;
                }
                else {
                    mensajeSweet("Ooops", "No se encontraron los municipios del estado ", "info");
                    //alert("No se encontraron los municipios del estado ");
                }
            },
            error: function (request, status, error) {
                mensajeSweet("Ooops", request.responseText, "info");
                //alert(request.responseText);
            }
        });

    }
    // muestra los municipios consultados en una tabla
    function muestraMunicipios(data) {
        // creacion de la tabla
        var tablaMunicipios = new google.visualization.DataTable();
        tablaMunicipios.addColumn('string', 'Municipio');
        tablaMunicipios.addColumn('string', 'Analizar colonias');
        tablaMunicipios.addColumn('string', 'Analizar municipio');

        //se llena la tabla con los datos de la consulta
        for (var i = 0; i < data.length; i++) {
            tablaMunicipios.addRow([
               getCleanedString(data[i].mun_name.trim()),
                '<button  onclick=\"analizarColsMunicipio(\'' + data[i].st_name + '\',\'' + data[i].mun_name + '\')\" >Analizar colonias</button>',
                '<button  onclick=\"analizarMunicipio(\'' + getCleanedString(data[i].mun_name.trim()) + '\')\" >Analizar Municipio</button>',
            ]);
        }
        tablaMunicipios.addRow([
                '',
                '',
                '<button  onclick=\"analizarMunicipio(\'' + 'todos' + '\')\" >Todos los municipios</button>',
        ]);
        //agregar la tabla al div correspondiente de la paguina HTML
        var contenedor = new google.visualization.Table(tblMunicipios);
        // AGREGAR IMPLEMENTACIONES DE HTML EN LAS CELDAS DE LA TABLA Y PRECENTAR NUMERACION DE REGISTROS
        contenedor.draw(tablaMunicipios, { allowHtml: true, showRowNumber: true });
        //AGREGAR EVENTO DE CLIC EN EL REGISTRO DE LA TABLA
        google.visualization.events.addListener(contenedor, 'select', function () {

            //var row = table3.getSelection()[0].row

        });

       cierraDialog();
        dialogTablaMunicipios()
    }
    function muestraDialogMunicipios() {
       cierraDialog();
        dialogTablaMunicipios()
    }
    function dialogTablaMunicipios() {
        cierraDialog();
        muestraDialog('contenedorMunicipios');
        //var msg = document.getElementById('contenedorMunicipios');
        //msg.showModal();
        //dialogos.push(msg);

    }
    // obtiene las colonias por municipio y determina cuales contienen notas
    function analizarColsMunicipio(estado, municipio) {
        quitarcolonias();

        // se optiene las colonias del municipio elegido
        var coloniasXmunicipio;
        var coloniasSinNotas = [];
        var coloniasConNotas = [];
        var indiceI;
        var indiceS;
        estado = estado.trim();
        var conNotas = false;
        var impGral = 0;
        var formaInfo = $("#forma_pedido option:selected").text();

        for (var i = 0; i < edosIndices.length; i++) {
            if (estado == edosIndices[i].edo_geo.trim()) {
                indiceI = edosIndices[i].min_ind;
                indiceS = edosIndices[i].max_ind;
                break;
            }
        }
        $.ajax({
            type: "POST",
            url: "/Home/getColXMun/",
            data: { edo_geo: estado.trim(), min_ind: indiceI, max_ind: indiceS, mun_name: municipio.trim() },
            datatype: "json",
            success: function (data) {
                if (data != null) {
                    coloniasXmunicipio = data;
                    // determinar si hay notas
                    if (notas.length > 0) {
                        // determinar que colonias
                        for (var m = 0; m < coloniasXmunicipio.length; m++) {
                            var puntos = coloniasXmunicipio[m].geometry.trim();
                            var coordenadas = puntos.split('),(');
                            var poligon = [];
                            var lonlat;
                            // obtener las coredenadas en areglo
                            for (var j = 0; j < coordenadas.length; j++) {
                                coordenadas[j] = coordenadas[j].replace('(', '');
                                coordenadas[j] = coordenadas[j].replace(')', '');
                                lonlat = coordenadas[j].split(",");
                                poligon.push(new google.maps.LatLng(parseFloat(lonlat[0]), parseFloat(lonlat[1])));
                                point = new google.maps.LatLng(lonlat[0], lonlat[1]);
                            }
                            // map.setCenter(point);
                            // Contruccion del la geocerca
                            var geopoligon = new google.maps.Polygon({
                                paths: poligon,
                                strokeColor: colorGeo,
                                strokeOpacity: 0.8,
                                strokeWeight: 2,
                                fillColor: colorGeo,
                                //fillColor: geocercas[i].color_geo.trim(),
                                fillOpacity: intencidad / 100,

                                html: coloniasXmunicipio[i].mun_name
                            });
                            impGral = 0;
                            // buscar almenos una nota en la colonia
                            for (var k = 0; k < notas.length; k++) {

                                if (notas[k].gps_nvta.trim() != '') {
                                    var putosgps = notas[k].gps_nvta.trim().split(' ');
                                    var point1 = new google.maps.LatLng(parseFloat(putosgps[0].trim()), parseFloat(putosgps[1].trim()));
                                    if (google.maps.geometry.poly.containsLocation(point1, geopoligon) & planta == notas[k].pla_nvta.trim()) {
                                        if (determinarMuestreoMarker(notas[k], formaInfo))
                                            conNotas = true;
                                        //break;
                                    }
                                }
                            }
                            if (conNotas)
                                coloniasConNotas.push(coloniasXmunicipio[m]);
                            else
                                coloniasSinNotas.push(coloniasXmunicipio[m]);

                            conNotas = false;
                            geopoligon = null;
                        }// fin for para determina si hay notas en las colonias

                        analizarNotasXcolonia(coloniasConNotas, coloniasSinNotas)
                    }
                    else {
                        mensajeSweet("Ooops", "No hay notas cargadas para realizar el analisis", "info");
                        //alert("No hay notas cargadas para realizar el analisis");
                    }

                }
                else {
                    mensajeSweet("Ooops", "No se encontro las colonias con los criterios buscados", "info");
                    //alert("No se encontro las colonias con los criterios buscados");
                }
            },
            error: function (request, status, error) {
                mensajeSweet("Ooops", request.responseText, "info");
                //alert(request.responseText);
            }
        });



    }
    // analiza las notas por colonia
    function analizarNotasXcolonia(colConNotas, colSinNotas, colores) {
        var geoColResumen = [];
        var vtaKG = 0;
        var vtaLT = 0;
        var lts = 0;
        var kgs = 0;
        var impTotal = 0;
        var formaInfo = $("#forma_pedido option:selected").text();
        var impMax = 0;

        for (var i = 0; i < colConNotas.length; i++) {
            var puntos = colConNotas[i].geometry.trim();
            var coordenadas = puntos.split('),(');
            var poligon = [];
            var lonlat;
            // obtener las coredenadas en areglo
            for (var j = 0; j < coordenadas.length; j++) {
                coordenadas[j] = coordenadas[j].replace('(', '');
                coordenadas[j] = coordenadas[j].replace(')', '');
                lonlat = coordenadas[j].split(",");
                poligon.push(new google.maps.LatLng(parseFloat(lonlat[0]), parseFloat(lonlat[1])));
                point = new google.maps.LatLng(lonlat[0], lonlat[1]);
            }
            // map.setCenter(point);
            // Contruccion del la geocerca
            var geopoligon = new google.maps.Polygon({
                paths: poligon,
                strokeColor: '#FF0000',
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: colorGeo,
                //fillColor: geocercas[i].color_geo.trim(),
                fillOpacity: intencidad / 100,
                title: colConNotas[i].st_name,
                html: colConNotas[i].mun_name
            });

            vtaKG = 0;
            vtaLT = 0;
            lts = 0;
            kgs = 0;
            impTotal = 0;

            for (var k = 0; k < notas.length; k++) {
                if (notas[k].gps_nvta.trim() != '') {
                    var putosgps = notas[k].gps_nvta.trim().split(' ');
                    var point1 = new google.maps.LatLng(parseFloat(putosgps[0].trim()), parseFloat(putosgps[1].trim()));
                    if (google.maps.geometry.poly.containsLocation(point1, geopoligon) & planta == notas[k].pla_nvta.trim()) {
                        if (determinarMuestreoMarker(notas[k], formaInfo)) {
                            if ((notas[k].tip_nvta.trim() == 'E' | (notas[k].tip_nvta.trim() == 'C'))) {
                                switch (notas[k].tiprut_nvta.trim()) {
                                    case "C":
                                        vtaKG = vtaKG + parseFloat(notas[k].impt_nvta);
                                        kgs = kgs + parseFloat(notas[k].tlts_nvta);
                                        break;
                                    case "M":
                                        vtaLT = vtaLT + parseFloat(notas[k].impt_nvta);
                                        lts = lts + parseFloat(notas[k].tlts_nvta);
                                        break;

                                }
                                impTotal = impTotal + parseFloat(notas[k].impt_nvta);
                            }

                        }

                    }
                }

            }// fin for analisar notas

            if (impMax < impTotal) {
                impMax = impTotal;
            }
            geopoligon.title = impTotal + '';
            // geopoligon.setMap(map);
            // se crea el codigo html para la colonia
            var html =
                '<label>COLONIA:' + colConNotas[i].sett_name.trim() + '</label></br>' +
                '<table >' +
                '<tr> <td>VENTA  EN KILOS</td> <td>$ ' + new Intl.NumberFormat('es-MX').format(vtaKG) + '</td></tr>' +
                '<tr> <td>KILOS VENDIDOS</td><td>' + new Intl.NumberFormat('es-MX').format(kgs) + '</td></tr>' +
                '<tr> <td>VENTA EN LITROS</td><td>$' + new Intl.NumberFormat('es-MX').format(vtaLT) + '</td></tr>' +
                '<tr> <td>LITROS VENDIDOS</td><td>' + new Intl.NumberFormat('es-MX').format(lts) + '</td></tr>' +
                '<tr> <td>IMPORTE TOTAL</td> <td>$' + new Intl.NumberFormat('es-MX').format(impTotal) + '</td></tr>' +
                '</table >';

            geopoligon.html = html;
            //geopoligon.fillColor = asignaColor(impTotal,colores)



            infoWindowG = new google.maps.InfoWindow();
            google.maps.event.addListener(geopoligon, 'click', MuestraInfocolall);


            arr_colonias.push(geopoligon);
        }//fin de crear geocercas con venta

        var rango = impMax / 5;
        var arr_colores = [];
        arr_colores.push({ rango: (rango * 1) + '', color: '#FE2C02' });
        arr_colores.push({ rango: (rango * 2) + '', color: '#F5A84B' });
        arr_colores.push({ rango: (rango * 3) + '', color: '#F5FC01' });
        arr_colores.push({ rango: (rango * 4) + '', color: '#99FC01' });
        arr_colores.push({ rango: (rango * 5) + '', color: '#4EBD00' });



        // asignar color a las colonias con venta
        for (var i = 0; i < arr_colonias.length; i++) {

            for (var j = 0; j < arr_colores.length; j++) {
                if (parseFloat(arr_colonias[i].title) <= arr_colores[j].rango & parseFloat(arr_colonias[i].title) >= (arr_colores[0].rango * (j))) {
                    arr_colonias[i].strokeColor = arr_colores[j].color;
                    arr_colonias[i].fillColor = arr_colores[j].color;
                }

            }

            arr_colonias[i].setMap(map);
        }





        // se colocan las colonias sin venta
        for (var i = 0; i < colSinNotas.length; i++) {
            var puntos = colSinNotas[i].geometry.trim();
            var coordenadas = puntos.split('),(');
            var poligon = [];
            var lonlat;
            // obtener las coredenadas en areglo
            for (var j = 0; j < coordenadas.length; j++) {
                coordenadas[j] = coordenadas[j].replace('(', '');
                coordenadas[j] = coordenadas[j].replace(')', '');
                lonlat = coordenadas[j].split(",");
                poligon.push(new google.maps.LatLng(parseFloat(lonlat[0]), parseFloat(lonlat[1])));
                point = new google.maps.LatLng(lonlat[0], lonlat[1]);
            }
            // map.setCenter(point);
            // Contruccion del la geocerca
            var geopoligon = new google.maps.Polygon({
                paths: poligon,
                strokeColor: '#000',
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: '#000',
                //fillColor: geocercas[i].color_geo.trim(),
                fillOpacity: intencidad / 100,
                title: colSinNotas[i].sett_name,
                html: 'col' + colSinNotas[i].sett_name + ' sin venta'
            });

            geopoligon.setMap(map);
            infoWindowG = new google.maps.InfoWindow();
            google.maps.event.addListener(geopoligon, 'click', MuestraInfocolall);
            arr_colonias.push(geopoligon);
        }//fin de agregar geocerca
       cierraDialog();

        function MuestraInfocolall(event) {
            infoWindowG.setContent(this.html);
            infoWindowG.setPosition(event.latLng);
            infoWindowG.open(map);
        }



    }
    // grafica uno o todos los municipios
    function analizarMunicipio(municipio) {
        var partes_municipios = arr_municipios;
        var municipios = [];

        var arr_ptos_gps_todos_municipios = [];
        // obtengo los municipios por separado de la informacion
        var munAct = "";
        if (municipio == 'todos') {
            for (var i = 0; i < partes_municipios.length; i++) {

                if (getCleanedString(munAct.trim()) != partes_municipios[i].nom_mun.trim()) {
                    municipios.push(partes_municipios[i]);
                }

                munAct = partes_municipios[i].nom_mun;
            }
            quitarMunicipios();
        }
        else {
            for (var i = 0; i < partes_municipios.length; i++) {
                if (getCleanedString(municipio.trim()) == partes_municipios[i].nom_mun.trim() || partes_municipios[i].nom_mun.trim().includes(getCleanedString(municipio.trim())) || getCleanedString(municipio.trim()).includes(partes_municipios[i].nom_mun.trim())) {
                    municipios.push(partes_municipios[i]);
                    break;
                }
            }

        }


        for (var i = 0; i < municipios.length; i++) {

            //municipios[i].geometry = "";
            var pto_gps_x_municipio = [];
            for (var j = 0; j < partes_municipios.length; j++) {
                if (municipios[i].nom_mun.trim() == partes_municipios[j].nom_mun.trim()) {


                    var puntos = partes_municipios[j].geometry.trim();
                    var coordenadas = puntos.split('),(');
                    var poligon = [];
                    var lonlat;
                    var lengthLat = [];
                    // obtener las coredenadas en areglo
                    for (var m = 0; m < coordenadas.length; m++) {
                        coordenadas[m] = coordenadas[m].replace('(', '');
                        coordenadas[m] = coordenadas[m].replace(')', '');
                        lonlat = coordenadas[m].split(",");
                        if (lonlat.length == 2) {
                            if (lonlat[0].length >= 17 & lonlat[1].length >= 17) {
                                lengthLat = lonlat[0].split('.');
                                if (lengthLat[0].length > 1) {
                                    pto_gps_x_municipio.push(new google.maps.LatLng(parseFloat(lonlat[0]), parseFloat(lonlat[1])));
                                }




                            }

                        }
                    }

                    // fin de algoritmo
                }
            }
            arr_ptos_gps_todos_municipios.push(pto_gps_x_municipio);


        }
        construccionGeocercasMun(municipios, arr_ptos_gps_todos_municipios);

        function construccionGeocercasMun(geocercas, coordenadas_mun) {



            for (var i = 0; i < geocercas.length; i++) {

                // map.setCenter(point);
                // Contruccion del la geocerca
                var geopoligon = new google.maps.Polygon({
                    paths: coordenadas_mun[i],// poligon,
                    strokeColor: colorGeo,
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: colorGeo,
                    //fillColor: geocercas[i].color_geo.trim(),
                    fillOpacity: intencidad / 100,
                    title: geocercas[i].nom_mun,
                    html: geocercas[i].nom_mun
                });
                geopoligon.setMap(map);
                municipios_en_mapa.push(geopoligon);


                infoWindowG = new google.maps.InfoWindow();
                google.maps.event.addListener(geopoligon, 'click', MuestraInfoMun);
            }// fin for





        }

    }
    // quira los municipios mostrados en el mapa
    function quitarMunicipios() {
        for (var i = 0; i < municipios_en_mapa.length; i++) {
            municipios_en_mapa[i].setMap(null);
        }
        municipios_en_mapa = [];
    }
    // analisa las notas de venta por municipio
    function MuestraInfoMun(event) {
        infoWindowG.setContent(this.html);
        infoWindowG.setPosition(event.latLng);
        infoWindowG.open(map);
        if (document.getElementById('checNegocios').checked) {
            getNegocios(event.latLng);
        }
        else {
        var servidor = document.getElementById("serv").innerHTML;
        var fecha_ini = document.getElementById("fecha_ini").value;
        var fecha_fin = document.getElementById("fecha_fin").value;
        document.getElementById("titulo_graficas").innerHTML = 'Servidor: ' + servidor + ' Tipo de poligono: Municipio Descripcion: ' + this.title + ' Fechas: ' + fecha_ini + ' a ' + fecha_fin;

        var formaInfo = $("#forma_pedido option:selected").text();

        var municipio_analisis;
        for (var i = 0; i < municipios_en_mapa.length; i++) {
            if (municipios_en_mapa[i].html == this.html) {
                municipio_analisis = municipios_en_mapa[i];
                break;
            }

        }
        notas_analisis = [];
        if (notas != null) {
            if (notas.length > 0) {
                for (var i = 0; i < notas.length; i++) {
                    if (notas[i].gps_nvta != null & notas[i].gps_nvta.trim().length > 2) {
                        var putosgps = notas[i].gps_nvta.trim().split(' ');
                        var point1 = new google.maps.LatLng(parseFloat(putosgps[0].trim()), parseFloat(putosgps[1].trim()));
                        if ((google.maps.geometry.poly.containsLocation(point1, municipio_analisis) & planta.trim() == notas[i].pla_nvta.trim()) || (planta == 'Todas' & google.maps.geometry.poly.containsLocation(point1, municipio_analisis)))
                            if (determinarMuestreoMarker(notas[i], formaInfo))
                                notas_analisis.push(notas[i]);
                    }
                }
                analizaArea(notas_analisis);
            }
            else {
                confirm("No contienes notas para realizar el analisis");
            }
        }
        else {
            confirm("No contienes notas para realizar el analisis");
        }
    }
    }
    // realiza un analaisis del area geografica
    function analizaArea(notas) {
        // se analizan las notas que concuerden dentro del poligono
        // variables de resumen general
        var ped_rut = $("#accion option:selected").text();
        var sumaKG = 0;
        var sumaImp = 0;
        var promKG = 0;
        var promImp = 0;
        var totalNotasVta = 0;
        var sumaImpCil = 0;
        var sumaImpEst = 0;
        var notasCil = 0;
        var notasEst = 0;
        var sumakgcil = 0;
        var sumakgest = 0;
        // variables de detalle tipo de nota
        var donkg = 0, impdonkg = 0, contdonkg = 0;
        var donlt = 0, impdonlt = 0, contdonlt = 0;
        var carb = 0, impcarb = 0, contcarb = 0;
        var cil = 0, impcil = 0, contcil = 0;
        var est = 0, impest = 0, contest = 0;
        var fugaslt = 0, impfugaslt = 0, contfugaslt = 0;
        var fugaskg = 0, impfugaskg = 0, contfugaskg = 0;
        var trans = 0, imptrans = 0, contrans = 0;
        // variables de forma de pago
        var impCreApp = 0, NotasCreApp = 0, TotkgCreApp = 0;
        var impDebApp = 0, NotasDebApp = 0, TotKgDebApp = 0;
        var impCre = 0, NotasCre = 0, TotKgCre = 0;
        var impEfe = 0, NotasEfe = 0, TotKgEfe = 0;
        var impFugl = 0, NotasFugl = 0, TotKgFugl = 0;
        var impCgs = 0, NotasCgs = 0, TotKgCgs = 0;
        var impFugK = 0, NotasFugK = 0, TotKgFugK = 0;
        var impTran = 0, NotasTran = 0, TotKgTran = 0;
        // variables de tipo de pedido
        var impCalle = 0, NotasCalle = 0, KilosCalle = 0;
        var impCalCe = 0, NotasCalCe = 0, KilosCalCe = 0;
        var impProa = 0, NotasProa = 0, KilosProa = 0;
        var impPxs = 0, NotasPxs = 0, KilosPxs = 0;
        var impApp = 0, NotasApp = 0, KilosApp = 0;
        var impEnc = 0, NotasEnc = 0, KilosEnc = 0;
        var impWeb = 0, NotasWeb = 0, KilosWeb = 0;
        var impcf = 0, Notascf = 0, Kiloscf = 0;
        //varibles de tipo de uso
        var ImpDom = 0, NotasDom = 0, kilosDom = 0;
        var ImpCom = 0, NotasCom = 0, kilosCom = 0;
        var ImpInd = 0, NotasInd = 0, kilosInd = 0;
        var ImpSer = 0, NotasSer = 0, kilosSer = 0;
        var ImpCarb = 0, NotasCarb = 0, kilosCarb = 0;
        var ImpGra = 0, NotasGra = 0, kilosGra = 0;
        var ImpTor = 0, NotasTor = 0, kilosTor = 0;
        var ImpPan = 0, NotasPan = 0, kilosPan = 0;
        var ImpEju = 0, NotasEju = 0, kilosEju = 0;
        var ImpPlg = 0, NotasPlg = 0, kilosPlg = 0;


        for (var i = 0; i < notas.length; i++) {

            if ((notas[i].tip_nvta.trim() == 'E' | (notas[i].tip_nvta.trim() == 'C') | (notas[i].tip_nvta.trim() == 'B'))) {

                totalNotasVta++;
                sumaImp = sumaImp + parseFloat(notas[i].impt_nvta.trim());
                if (notas[i].tiprut_nvta.trim() == 'M') {
                    notasEst++;
                    sumaKG = sumaKG + (parseFloat(notas[i].tlts_nvta.trim()) * 0.54);
                    sumakgest = sumakgest + (parseFloat(notas[i].tlts_nvta.trim()) * 0.54);
                    sumaImpEst = sumaImpEst + parseFloat(notas[i].impt_nvta.trim());
                } else {
                    notasCil++;
                    sumaKG = sumaKG + (parseFloat(notas[i].tlts_nvta.trim()));
                    sumakgcil = sumakgcil + (parseFloat(notas[i].tlts_nvta.trim()));
                    sumaImpCil = sumaImpCil + parseFloat(notas[i].impt_nvta.trim());
                }

            }
            // se analaizan las notas a detalle del tipo  de nota
            switch (notas[i].tip_nvta.trim()) {
                case "K":
                    donkg = donkg + parseFloat(notas[i].tlts_nvta.trim());
                    impdonkg = impdonkg + parseFloat(notas[i].impt_nvta.trim());
                    contdonkg++;
                    break;
                case "P":
                    donlt = donlt + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                    impdonlt = impdonlt + parseFloat(notas[i].impt_nvta.trim());
                    contdonlt++;
                    break;
                case "B":
                    carb = carb + parseFloat(notas_analisis[i].tlts_nvta.trim()) * 0.54;
                    impcarb = impcarb + parseFloat(notas[i].impt_nvta.trim());
                    contcarb++;
                    break;
                case "C":
                    cil = cil + parseFloat(notas[i].tlts_nvta.trim());
                    impcil = impcil + parseFloat(notas[i].impt_nvta.trim());
                    contcil++;
                    break;
                case "E":
                    est = est + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                    impest = impest + parseFloat(notas[i].impt_nvta.trim())
                    contest++;
                    break;
                case "F":
                    fugaslt = fugaslt + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                    impfugaslt = impfugaslt + parseFloat(notas[i].impt_nvta.trim())
                    contfugaslt++;
                    break;
                case "Q":
                    fugaskg = fugaskg + parseFloat(notas[i].tlts_nvta.trim());
                    impfugaskg = impfugaskg + parseFloat(notas[i].impt_nvta.trim())
                    contfugaskg++;
                    break;
                case "T":
                    trans = trans + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                    imptrans = imptrans + parseFloat(notas[i].impt_nvta.trim())
                    contrans++;
                    break;
                default:

            }// FIN SWITCH
            //se analisa la forma de pago
            switch (notas_analisis[i].tpa_nvta.trim()) {
                case "R":
                    impCreApp = impCreApp + parseFloat(notas[i].impt_nvta.trim());
                    NotasCreApp++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            TotkgCreApp = TotkgCreApp + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            TotkgCreApp = TotkgCreApp + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            TotkgCreApp = TotkgCreApp + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "B":
                    impDebApp = impDebApp + parseFloat(notas[i].impt_nvta.trim());
                    NotasDebApp++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            TotKgDebApp = TotKgDebApp + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            TotKgDebApp = TotKgDebApp + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            TotKgDebApp = TotKgDebApp + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "C":
                    impCre = impCre + parseFloat(notas[i].impt_nvta.trim());
                    NotasCre++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            TotKgCre = TotKgCre + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            TotKgCre = TotKgCre + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            TotKgCre = TotKgCre + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "E":
                    impEfe = impEfe + parseFloat(notas[i].impt_nvta.trim());
                    NotasEfe++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            TotKgEfe = TotKgEfe + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            TotKgEfe = TotKgEfe + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            TotKgEfe = TotKgEfe + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "F":
                    impFugl = impFugl + parseFloat(notas[i].impt_nvta.trim());
                    NotasFugl++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            TotKgFugl = TotKgFugl + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            TotKgFugl = TotKgFugl + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            TotKgFugl = TotKgFugl + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "G":
                    impCgs = impCgs + parseFloat(notas[i].impt_nvta.trim());
                    NotasCgs++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            TotKgCgs = TotKgCgs + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            TotKgCgs = TotKgCgs + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            TotKgCgs = TotKgCgs + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "Q":
                    impFugK = impFugK + parseFloat(notas[i].impt_nvta.trim());
                    NotasFugK++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            TotKgFugK = TotKgFugK + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            TotKgFugK = TotKgFugK + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            TotKgFugK = TotKgFugK + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "T":

                    impTran = impTran + parseFloat(notas[i].impt_nvta.trim());
                    NotasTran++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            TotKgTran = TotKgTran + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            TotKgTran = TotKgTran + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            TotKgTran = TotKgTran + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                default:

            }//FIN SWITH
            // se analaizan las formas de pedido
            switch (notas[i].tpdo_nvta.trim()) {
                case "A":
                    impApp = impApp + parseFloat(notas[i].impt_nvta.trim());
                    NotasApp++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            KilosApp = KilosApp + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            KilosApp = KilosApp + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            KilosApp = KilosApp + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "C":
                    impCalle = impCalle + parseFloat(notas[i].impt_nvta.trim());
                    NotasCalle++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            KilosCalle = KilosCalle + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            KilosCalle = KilosCalle + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            KilosCalle = KilosCalle + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "P":
                    impProa = impProa + parseFloat(notas[i].impt_nvta.trim());
                    NotasProa++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            KilosProa = KilosProa + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            KilosProa = KilosProa + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            KilosProa = KilosProa + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "S":
                    impPxs = impPxs + parseFloat(notas[i].impt_nvta.trim());
                    NotasPxs++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            KilosPxs = KilosPxs + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            KilosPxs = KilosPxs + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            KilosPxs = KilosPxs + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "L":
                    impCalCe = impCalCe + parseFloat(notas[i].impt_nvta.trim());
                    NotasCalCe++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            KilosCalCe = KilosCalCe + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            KilosCalCe = KilosCalCe + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            KilosCalCe = KilosCalCe + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }

                    break;
                case "E":
                    impEnc = impEnc + parseFloat(notas[i].impt_nvta.trim());
                    NotasEnc++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            KilosEnc = KilosEnc + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            KilosEnc = KilosEnc + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            KilosEnc = KilosEnc + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "W":
                    impWeb = impWeb + parseFloat(notas[i].impt_nvta.trim());
                    NotasWeb++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            KilosWeb = KilosWeb + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            KilosWeb = KilosWeb + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            KilosWeb = KilosWeb + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "F":
                    impcf = impcf + parseFloat(notas[i].impt_nvta.trim());
                    Notascf++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            Kiloscf = Kiloscf + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            Kiloscf = Kiloscf + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            Kiloscf = Kiloscf + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;



            }//FIN SWITH

            // se analisa los usos
            switch (notas[i].uso_nvta.trim()) {
                case "1":
                    ImpDom = ImpDom + parseFloat(notas[i].impt_nvta.trim());
                    NotasDom++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            kilosDom = kilosDom + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            kilosDom = kilosDom + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            kilosDom = kilosDom + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "2":
                    //var ImpCom = 0, NotasCom = 0, kilosCom = 0;
                    ImpCom = ImpCom + parseFloat(notas[i].impt_nvta.trim());
                    NotasCom++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            kilosCom = kilosCom + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            kilosCom = kilosCom + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            kilosCom = kilosCom + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "3":
                    //var ImpInd = 0, NotasInd = 0, kilosInd = 0;
                    ImpInd = ImpInd + parseFloat(notas[i].impt_nvta.trim());
                    NotasInd++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            kilosInd = kilosInd + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            kilosInd = kilosInd + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            kilosInd = kilosInd + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "4":
                    //var ImpSer = 0, NotasSer = 0, kilosSer = 0;
                    ImpSer = ImpSer + parseFloat(notas[i].impt_nvta.trim());
                    NotasSer++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            kilosSer = kilosSer + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            kilosSer = kilosSer + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            kilosSer = kilosSer + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }

                    break;
                case "5":
                    //var ImpCarb = 0, NotasCarb = 0, kilosCarb = 0;
                    ImpCarb = ImpCarb + parseFloat(notas[i].impt_nvta.trim());
                    NotasCarb++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            kilosCarb = kilosCarb + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            kilosCarb = kilosCarb + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            kilosCarb = kilosCarb + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "6":
                    // var ImpGra = 0, NotasGra = 0, kilosGra = 0;
                    ImpGra = ImpGra + parseFloat(notas[i].impt_nvta.trim());
                    NotasGra++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            kilosGra = kilosGra + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            kilosGra = kilosGra + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            kilosGra = kilosGra + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;

                case "7":
                    //var ImpTor = 0, NotasTor = 0, kilosTor = 0;
                    ImpTor = ImpTor + parseFloat(notas[i].impt_nvta.trim());
                    NotasTor++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            kilosTor = kilosTor + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            kilosTor = kilosTor + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            kilosTor = kilosTor + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "8":
                    //var ImpPan = 0, NotasPan = 0, kilosPan = 0;
                    ImpPan = ImpPan + parseFloat(notas[i].impt_nvta.trim());
                    NotasPan++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            kilosPan = kilosPan + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            kilosPan = kilosPan + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            kilosPan = kilosPan + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "9":
                    // var ImpEju = 0, NotasEju = 0, kilosEju = 0;
                    ImpEju = ImpEju + parseFloat(notas[i].impt_nvta.trim());
                    NotasEju++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            kilosEju = kilosEju + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            kilosEju = kilosEju + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            kilosEju = kilosEju + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
                case "10":
                    //var ImpPlg = 0, NotasPlg = 0, kilosPlg = 0;
                    ImpPlg = ImpPlg + parseFloat(notas[i].impt_nvta.trim());
                    NotasPlg++;
                    switch (notas[i].tiprut_nvta.trim()) {
                        case "B":
                            kilosPlg = kilosPlg + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                        case "C":
                            kilosPlg = kilosPlg + parseFloat(notas[i].tlts_nvta.trim());
                            break;
                        case "M":
                            kilosPlg = kilosPlg + parseFloat(notas[i].tlts_nvta.trim()) * 0.54;
                            break;
                    }
                    break;
            }





        }// FIN FOR

        var mystyles = { Rows: 'mystyle1' };
        /*
        Luego usamos esta variable 'mystyles' para el método de dibujo como se muestra a continuación

        visualización.draw (datos, {allowHtml: true, altura: 500, ancho: 728, cssClassNames: mystyles });
        */


        if (ped_rut.trim() != 'RUTAS') {
            promKG = sumaKG / totalNotasVta;
            promImp = sumaImp / totalNotasVta;
            var tablaresumen = new google.visualization.DataTable();
            tablaresumen.addColumn('string', 'CONCEPTO');
            tablaresumen.addColumn('string', 'VALOR');
            //se llena la tabla con los datos del analisis
            tablaresumen.addRow(['Notas con venta', '' + totalNotasVta + '']);
            tablaresumen.addRow(['Kg vendidos', '' + sumaKG.toFixed(2) + '']);
            tablaresumen.addRow(['$ obtenido', '' + '$ ' + new Intl.NumberFormat('es-MX').format(sumaImp.toFixed(2)) + '']);
            tablaresumen.addRow(['kg  Cil', '' + sumakgcil + '']);
            tablaresumen.addRow(['Importe cil', '' + '$ ' + new Intl.NumberFormat('es-MX').format(sumaImpCil.toFixed(2)) + '']);
            tablaresumen.addRow(['Prom kg por nota Cil', '' + (sumakgcil.toFixed(2) / notasCil).toFixed(2) + '']);
            tablaresumen.addRow(['Prom $ por nota  cil', '' + '$ ' + (sumaImpCil.toFixed(2) / notasCil).toFixed(2) + '']);
            tablaresumen.addRow(['kg Est', '' + sumakgest.toFixed(2) + '']);
            tablaresumen.addRow(['Importe Est', '' + '$ ' + new Intl.NumberFormat('es-MX').format(sumaImpEst.toFixed(2)) + '']);
            tablaresumen.addRow(['Prom kg por nota Est', '' + (sumakgest.toFixed(2) / notasEst).toFixed(2) + '']);
            tablaresumen.addRow(['Prom $ por nota  Est', '' + '$ ' + new Intl.NumberFormat('es-MX').format((sumaImpEst.toFixed(2) / notasEst).toFixed(2)) + '']);

            var contenedor = new google.visualization.Table(tblAnalisiGral);
            contenedor.draw(tablaresumen, { allowHtml: true, showRowNumber: false, chartArea: {
                // leave room for y-axis labels
                width: '100%'
            },
                legend: {
                    position: 'top'
                },
                width: '100%'
            });
            google.visualization.events.addListener(contenedor, 'select', function () {
                //var row = table3.getSelection()[0].row
            });


        }

        // Tabla Tip_nvta
        var tablatipnvta = new google.visualization.DataTable();
        tablatipnvta.addColumn('string', 'Concepto');
        tablatipnvta.addColumn('string', 'Imp');
        tablatipnvta.addColumn('string', 'Notas');
        tablatipnvta.addColumn('string', 'Kg´s');
        tablatipnvta.addColumn('string', 'Imp prom');
        tablatipnvta.addColumn('string', 'Kg´s prom');
        tablatipnvta.addColumn('string', '%');



        tablatipnvta.addRow(['Donaciones kg ', '' + new Intl.NumberFormat('es-MX').format(impdonkg.toFixed(2)), new Intl.NumberFormat('es-MX').format(contdonkg) + '', '' + new Intl.NumberFormat('es-MX').format(donkg.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((impdonkg.toFixed(2) / contdonkg).toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((donkg.toFixed(2) / contdonkg).toFixed(2)), '' + ((100 * contdonkg) / notas.length).toFixed(2)]);
        tablatipnvta.addRow(['Donaciones lt ', '' + new Intl.NumberFormat('es-MX').format(impdonlt.toFixed(2)), new Intl.NumberFormat('es-MX').format(contdonlt) + '', '' + new Intl.NumberFormat('es-MX').format(donlt.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((impdonlt.toFixed(2) / contdonkg).toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((donlt.toFixed(2) / contdonlt).toFixed(2)), '' + ((100 * contdonlt) / notas.length).toFixed(2)]);
        tablatipnvta.addRow(['Carburacion   ', '' + new Intl.NumberFormat('es-MX').format(impcarb.toFixed(2)), new Intl.NumberFormat('es-MX').format(contcarb) + '', '' + new Intl.NumberFormat('es-MX').format(carb.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((impcarb.toFixed(2) / contcarb).toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((carb.toFixed(2) / contcarb).toFixed(2)), '' + ((100 * contcarb) / notas.length).toFixed(2)]);
        tablatipnvta.addRow(['Cilindros     ', '' + new Intl.NumberFormat('es-MX').format(impcil.toFixed(2)), new Intl.NumberFormat('es-MX').format(contcil) + '', '' + new Intl.NumberFormat('es-MX').format(cil.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((impcil.toFixed(2) / contcil).toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((cil.toFixed(2) / contcil).toFixed(2)), '' + ((100 * contcil) / notas.length).toFixed(2)]);
        tablatipnvta.addRow(['Estacionario  ', '' + new Intl.NumberFormat('es-MX').format(impest.toFixed(2)), new Intl.NumberFormat('es-MX').format(contest) + '', '' + new Intl.NumberFormat('es-MX').format(est.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((impest.toFixed(2) / contest).toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((est.toFixed(2) / contest).toFixed(2)), '' + ((100 * contest) / notas.length).toFixed(2)]);
        tablatipnvta.addRow(['Fugas lt      ', '' + new Intl.NumberFormat('es-MX').format(impfugaslt.toFixed(2)), new Intl.NumberFormat('es-MX').format(contfugaslt) + '', '' + new Intl.NumberFormat('es-MX').format(fugaslt.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((impfugaslt.toFixed(2) / contfugaslt).toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((fugaslt.toFixed(2) / contfugaslt).toFixed(2)), '' + ((100 * contfugaslt) / notas.length).toFixed(2)]);
        tablatipnvta.addRow(['Fugas kg      ', '' + new Intl.NumberFormat('es-MX').format(impfugaskg.toFixed(2)), new Intl.NumberFormat('es-MX').format(contfugaskg) + '', '' + new Intl.NumberFormat('es-MX').format(fugaskg.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((impfugaskg.toFixed(2) / contfugaskg).toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((fugaskg.toFixed(2) / contfugaskg).toFixed(2)), '' + ((100 * contfugaskg) / notas.length).toFixed(2)]);
        tablatipnvta.addRow(['Transferencias', '' + new Intl.NumberFormat('es-MX').format(imptrans.toFixed(2)), new Intl.NumberFormat('es-MX').format(contrans) + '', '' + new Intl.NumberFormat('es-MX').format(trans.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((imptrans.toFixed(2) / contrans).toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((trans.toFixed(2) / contrans).toFixed(2)), '' + ((100 * contrans) / notas.length).toFixed(2)]);
        var contenedor2 = new google.visualization.Table(tblAnalisiTipNvta);
        contenedor2.draw(tablatipnvta, {
            allowHtml: true, showRowNumber: false, chartArea: {
                // leave room for y-axis labels
                width: '100%'
            },
            legend: {
                position: 'top'
            },
            width: '100%'
        });
        google.visualization.events.addListener(contenedor2, 'select', function () {
            //var row = table3.getSelection()[0].row
        });

        //Tabla tipo pago
        var tablatippago = new google.visualization.DataTable();
        tablatippago.addColumn('string', 'Concepto');
        tablatippago.addColumn('string', 'Imp');
        tablatippago.addColumn('string', 'Notas');
        tablatippago.addColumn('string', 'Kg´s');
        tablatippago.addColumn('string', 'Imp prom');
        tablatippago.addColumn('string', 'Kg´s prom');
        tablatippago.addColumn('string', '%');

        tablatippago.addRow(['Credito App   ', ' ' + new Intl.NumberFormat('es-MX').format(impCreApp.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format(NotasCreApp), '' + new Intl.NumberFormat('es-MX').format(TotkgCreApp.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((impCreApp.toFixed(2) / NotasCreApp).toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((TotkgCreApp / NotasCreApp).toFixed(2)), ' ' + ((100 * NotasCreApp) / notas.length).toFixed(2)]);
        tablatippago.addRow(['Debito App    ', ' ' + new Intl.NumberFormat('es-MX').format(impDebApp.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format(NotasDebApp), '' + new Intl.NumberFormat('es-MX').format(TotKgDebApp.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((impDebApp.toFixed(2) / NotasDebApp).toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((TotKgDebApp / NotasDebApp).toFixed(2)), ' ' + ((100 * NotasDebApp) / notas.length).toFixed(2)]);
        tablatippago.addRow(['Credito       ', ' ' + new Intl.NumberFormat('es-MX').format(impCre.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format(NotasCre), '' + new Intl.NumberFormat('es-MX').format(TotKgCre.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((impCre.toFixed(2) / NotasCre).toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((TotKgCre / NotasCre).toFixed(2)), ' ' + ((100 * NotasCre) / notas.length).toFixed(2)]);
        tablatippago.addRow(['Efectivo      ', ' ' + new Intl.NumberFormat('es-MX').format(impEfe.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format(NotasEfe), '' + new Intl.NumberFormat('es-MX').format(TotKgEfe.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((impEfe.toFixed(2) / NotasEfe).toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((TotKgEfe / NotasEfe).toFixed(2)), ' ' + ((100 * NotasEfe) / notas.length).toFixed(2)]);
        tablatippago.addRow(['Fuga lts      ', ' ' + new Intl.NumberFormat('es-MX').format(impFugl.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format(NotasFugl), '' + new Intl.NumberFormat('es-MX').format(TotKgFugl.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((impFugl.toFixed(2) / NotasFugl).toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((TotKgFugl / NotasFugl).toFixed(2)), ' ' + ((100 * NotasFugl) / notas.length).toFixed(2)]);
        tablatippago.addRow(['CrediGas      ', ' ' + new Intl.NumberFormat('es-MX').format(impCgs.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format(NotasCgs), '' + new Intl.NumberFormat('es-MX').format(TotKgCgs.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((impCgs.toFixed(2) / NotasCgs).toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((TotKgCgs / NotasCgs).toFixed(2)), ' ' + ((100 * NotasCgs) / notas.length).toFixed(2)]);
        tablatippago.addRow(['Fugas kg      ', ' ' + new Intl.NumberFormat('es-MX').format(impFugK.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format(NotasFugK), '' + new Intl.NumberFormat('es-MX').format(TotKgFugK.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((impFugK.toFixed(2) / NotasFugK).toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((TotKgFugK / NotasFugK).toFixed(2)), ' ' + ((100 * NotasFugK) / notas.length).toFixed(2)]);
        tablatippago.addRow(['Transferencias', ' ' + new Intl.NumberFormat('es-MX').format(impTran.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format(NotasTran), '' + new Intl.NumberFormat('es-MX').format(TotKgTran.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((impTran.toFixed(2) / NotasTran).toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((TotKgTran / NotasTran).toFixed(2)), ' ' + ((100 * NotasTran) / notas.length).toFixed(2)]);
        var contenedor3 = new google.visualization.Table(tblAnalisiTippago);
        contenedor3.draw(tablatippago, {
            allowHtml: true, showRowNumber: false, chartArea: {
                // leave room for y-axis labels
                width: '100%'
            },
            legend: {
                position: 'top'
            },
            width: '100%'
        });
        google.visualization.events.addListener(contenedor3, 'select', function () {
            //var row = table3.getSelection()[0].row
        });

        // Tabla tipo de pedido

        var tablatippedido = new google.visualization.DataTable();
        tablatippedido.addColumn('string', 'Concepto');
        tablatippedido.addColumn('string', 'Imp');
        tablatippedido.addColumn('string', 'Notas');
        tablatippedido.addColumn('string', 'Kg´s');
        tablatippedido.addColumn('string', 'Imp prom');
        tablatippedido.addColumn('string', 'Kg´s prom');
        tablatippedido.addColumn('string', '%');

        tablatippedido.addRow(['Calle      ', ' ' + new Intl.NumberFormat('es-MX').format(impCalle.toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format(NotasCalle), ' ' + new Intl.NumberFormat('es-MX').format(KilosCalle.toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((impCalle.toFixed(2) / NotasCalle).toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((KilosCalle.toFixed(2) / NotasCalle).toFixed(2)), ' ' + ((100 * NotasCalle) / notas.length).toFixed(2)]);
        tablatippedido.addRow(['Call Center', ' ' + new Intl.NumberFormat('es-MX').format(impCalCe.toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format(NotasCalCe), ' ' + new Intl.NumberFormat('es-MX').format(KilosCalCe.toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((impCalCe.toFixed(2) / NotasCalCe).toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((KilosCalCe.toFixed(2) / NotasCalCe).toFixed(2)), ' ' + ((100 * NotasCalCe) / notas.length).toFixed(2)]);
        tablatippedido.addRow(['Proactivo  ', ' ' + new Intl.NumberFormat('es-MX').format(impProa.toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format(NotasProa), ' ' + new Intl.NumberFormat('es-MX').format(KilosProa.toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((impProa.toFixed(2) / NotasProa).toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((KilosProa.toFixed(2) / NotasProa).toFixed(2)), ' ' + ((100 * NotasProa) / notas.length).toFixed(2)]);
        tablatippedido.addRow(['Prog x Sis ', ' ' + new Intl.NumberFormat('es-MX').format(impPxs.toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format(NotasPxs), ' ' + new Intl.NumberFormat('es-MX').format(KilosPxs.toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((impPxs.toFixed(2) / NotasPxs).toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((KilosPxs.toFixed(2) / NotasPxs).toFixed(2)), ' ' + ((100 * NotasPxs) / notas.length).toFixed(2)]);
        tablatippedido.addRow(['App        ', ' ' + new Intl.NumberFormat('es-MX').format(impApp.toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format(NotasApp), ' ' + new Intl.NumberFormat('es-MX').format(KilosApp.toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((impApp.toFixed(2) / NotasApp).toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((KilosApp.toFixed(2) / NotasApp).toFixed(2)), ' ' + ((100 * NotasApp) / notas.length).toFixed(2)]);
        tablatippedido.addRow(['Encuesta   ', ' ' + new Intl.NumberFormat('es-MX').format(impEnc.toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format(NotasEnc), ' ' + new Intl.NumberFormat('es-MX').format(KilosEnc.toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((impEnc.toFixed(2) / NotasEnc).toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((KilosEnc.toFixed(2) / NotasEnc).toFixed(2)), ' ' + ((100 * NotasEnc) / notas.length).toFixed(2)]);
        tablatippedido.addRow(['Whats app  ', ' ' + new Intl.NumberFormat('es-MX').format(impWeb.toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format(NotasWeb), ' ' + new Intl.NumberFormat('es-MX').format(KilosWeb.toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((impWeb.toFixed(2) / NotasWeb).toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((KilosWeb.toFixed(2) / NotasWeb).toFixed(2)), ' ' + ((100 * NotasWeb) / notas.length).toFixed(2)]);
        tablatippedido.addRow(['Call Center Ext', ' ' + new Intl.NumberFormat('es-MX').format(impcf.toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format(Notascf), ' ' + new Intl.NumberFormat('es-MX').format(Kiloscf.toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((impcf.toFixed(2) / Notascf).toFixed(2)), ' ' + new Intl.NumberFormat('es-MX').format((Kiloscf.toFixed(2) / Notascf).toFixed(2)), ' ' + ((100 * Notascf) / notas.length).toFixed(2)]);

        var contenedor4 = new google.visualization.Table(tblAnalisiTipdo);
        contenedor4.draw(tablatippedido, {
            allowHtml: true, showRowNumber: false, chartArea: {
                // leave room for y-axis labels
                width: '100%'
            },
            legend: {
                position: 'top'
            },
            width: '100%'
        });
        google.visualization.events.addListener(contenedor4, 'select', function () {
            //var row = table3.getSelection()[0].row
        });
        // tabla uso de nota de venta
        //varibles de tipo de uso
        var tablausonvta = new google.visualization.DataTable();
        tablausonvta.addColumn('string', 'Concepto');
        tablausonvta.addColumn('string', 'Imp');
        tablausonvta.addColumn('string', 'Notas');
        tablausonvta.addColumn('string', 'Kg´s');
        tablausonvta.addColumn('string', 'Imp prom');
        tablausonvta.addColumn('string', 'Kg´s prom');
        tablausonvta.addColumn('string', '%'); new Intl.NumberFormat('es-MX').format()

        tablausonvta.addRow(['Domestico', '' + new Intl.NumberFormat('es-MX').format(ImpDom.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format(NotasDom), '' + new Intl.NumberFormat('es-MX').format(kilosDom.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((ImpDom.toFixed(2) / NotasDom).toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((kilosDom.toFixed(2) / NotasDom).toFixed(2)), '' + ((100 * NotasDom) / notas.length).toFixed(2)]);
        tablausonvta.addRow(['Comercial', '' + new Intl.NumberFormat('es-MX').format(ImpCom.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format(NotasCom), '' + new Intl.NumberFormat('es-MX').format(kilosCom.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((ImpCom.toFixed(2) / NotasCom).toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((kilosCom.toFixed(2) / NotasCom).toFixed(2)), '' + ((100 * NotasCom) / notas.length).toFixed(2)]);
        tablausonvta.addRow(['Industrial', '' + new Intl.NumberFormat('es-MX').format(ImpInd.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format(NotasInd), '' + new Intl.NumberFormat('es-MX').format(kilosInd.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((ImpInd.toFixed(2) / NotasInd).toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((kilosInd.toFixed(2) / NotasInd).toFixed(2)), '' + ((100 * NotasInd) / notas.length).toFixed(2)]);
        tablausonvta.addRow(['Servicios', '' + new Intl.NumberFormat('es-MX').format(ImpSer.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format(NotasSer), '' + new Intl.NumberFormat('es-MX').format(kilosSer.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((ImpInd.toFixed(2) / NotasSer).toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((kilosSer.toFixed(2) / NotasSer).toFixed(2)), '' + ((100 * NotasSer) / notas.length).toFixed(2)]);
        tablausonvta.addRow(['Carburacion', '' + new Intl.NumberFormat('es-MX').format(ImpCarb.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format(NotasCarb), '' + new Intl.NumberFormat('es-MX').format(kilosCarb.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((ImpCarb.toFixed(2) / NotasCarb).toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((kilosCarb.toFixed(2) / NotasCarb).toFixed(2)), '' + ((100 * NotasCarb) / notas.length).toFixed(2)]);
        tablausonvta.addRow(['Granjas', '' + new Intl.NumberFormat('es-MX').format(ImpGra.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format(NotasGra), '' + new Intl.NumberFormat('es-MX').format(kilosGra.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((ImpGra.toFixed(2) / NotasGra).toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((kilosGra.toFixed(2) / NotasGra).toFixed(2)), '' + ((100 * NotasGra) / notas.length).toFixed(2)]);
        tablausonvta.addRow(['Tortillerias', '' + new Intl.NumberFormat('es-MX').format(ImpTor.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format(NotasTor), '' + new Intl.NumberFormat('es-MX').format(kilosTor.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((ImpTor.toFixed(2) / NotasTor).toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((kilosTor.toFixed(2) / NotasTor).toFixed(2)), '' + ((100 * NotasTor) / notas.length).toFixed(2)]);
        tablausonvta.addRow(['Panaderia', '' + new Intl.NumberFormat('es-MX').format(ImpPan.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format(NotasPan), '' + new Intl.NumberFormat('es-MX').format(kilosPan.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((ImpPan.toFixed(2) / NotasPan).toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((kilosPan.toFixed(2) / NotasPan).toFixed(2)), '' + ((100 * NotasPan) / notas.length).toFixed(2)]);
        tablausonvta.addRow(['Extra Judicial', '' + new Intl.NumberFormat('es-MX').format(ImpEju.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format(NotasEju), '' + new Intl.NumberFormat('es-MX').format(kilosEju.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((ImpEju.toFixed(2) / NotasEju).toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((kilosEju.toFixed(2) / NotasEju).toFixed(2)), '' + ((100 * NotasEju) / notas.length).toFixed(2)]);
        tablausonvta.addRow(['Plus gas', '' + new Intl.NumberFormat('es-MX').format(ImpPlg.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format(NotasPlg), '' + new Intl.NumberFormat('es-MX').format(kilosPlg.toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((ImpPlg.toFixed(2) / NotasPlg).toFixed(2)), '' + new Intl.NumberFormat('es-MX').format((kilosPlg.toFixed(2) / NotasPlg).toFixed(2)), '' + ((100 * NotasPlg) / notas.length).toFixed(2)]);

        var contenedor5 = new google.visualization.Table(tblAnalisisUsoNvta);
        contenedor5.draw(tablausonvta, { allowHtml: true, showRowNumber:false , chartArea: {
            // leave room for y-axis labels
            width: '100%'
        },
            legend: {
                position: 'top'
            },
            width: '100%'
        });
        google.visualization.events.addListener(contenedor5, 'select', function () {
            //var row = table3.getSelection()[0].row
        });


        // analsis de frecuencia de pedidos por dia de la semana.
        google.setOnLoadCallback(muestraGraficaVtaDiaSem);
        muestraGraficaVtaDiaSem(notas);
        // grafica de venta en kg´s de los tipo de servicios
        google.setOnLoadCallback(muestraGraficaServiciosVtaKg);
        muestraGraficaServiciosVtaKg(notas);
        // grfica el numero de servicios
        google.setOnLoadCallback(muestraGraficaServicios);
        muestraGraficaServicios(notas);
        //muestra la grafica por usos
        google.setOnLoadCallback(muestraGraficaUsos);
        muestraGraficaUsos(notas);
        // muestra la gafica por forma de pedido
        google.setOnLoadCallback(muestraGraficaFormaPedido);
        muestraGraficaFormaPedido(notas);

       cierraDialog();
       previweMapa();
       muestraDialog('graficas');
        //var msg = document.getElementById('graficas');
        //msg.showModal();
        //dialogos.push(msg);






    }

    ////////////////////////////////////////// FUNCIONES DE USO GENERAL///////////////////////////////
    function getCleanedString(cadena) {
        // Definimos los caracteres que queremos eliminar
        var specialChars = "!#$^&%*()+=-[]\/{}|:<>?,.";

        // Los eliminamos todos
        for (var i = 0; i < specialChars.length; i++) {
            cadena = cadena.replace(new RegExp("\\" + specialChars[i], 'gi'), '');
        }

        // Lo queremos devolver limpio en minusculas
        cadena = cadena.toLowerCase();

        // Quitamos espacios y los sustituimos por _ porque nos gusta mas asi
        //cadena = cadena.replace(/ /g, "_");

        // Quitamos acentos y "ñ". Fijate en que va sin comillas el primer parametro
        cadena = cadena.replace(/á/gi, "a");
        cadena = cadena.replace(/é/gi, "e");
        cadena = cadena.replace(/í/gi, "i");
        cadena = cadena.replace(/ó/gi, "o");
        cadena = cadena.replace(/ú/gi, "u");
        cadena = cadena.replace(/ñ/gi, "n");
        return cadena.toUpperCase();
    }
    function getScreenshotOfElement(element, posX, posY, width, height, callback) {
        html2canvas(element, {
            onrendered: function (canvas) {
                var context = canvas.getContext('2d');
                var imageData = context.getImageData(posX, posY, width, height).data;
                var outputCanvas = document.createElement('canvas');
                var outputContext = outputCanvas.getContext('2d');
                outputCanvas.width = width;
                outputCanvas.height = height;

                var idata = outputContext.createImageData(width, height);
                idata.data.set(imageData);
                outputContext.putImageData(idata, 0, 0);
                callback(outputCanvas.toDataURL().replace("data:image/png;base64,", ""));
            },
            width: width,
            height: height,
            useCORS: true,
            taintTest: false,
            allowTaint: false
        });
    }





    /// ******************************************************************************************************************************///
    function todaslascolonias() {
        var edo = $("#select_estados option:selected").text();
        var indiceI;
        var indiceS;
        var claveEnt;

        for (var i = 0; i < edosIndices.length; i++) {
            if (edo == edosIndices[i].edo_geo) {
                claveEnt = edosIndices[i].cve_ent;
                break;
            }
        }

        $.ajax({
            type: "POST",
            url: "/Home/todoslosMunicipios/",
            data: { paramEdo: edo, paramString1: claveEnt },
            datatype: "json",
            success: function (data) {

                if (data != null) {
                    // todasLasColonias = data;
                   // alert("termino la consulta");

                    var partes_municipios = data;
                    var municipios = [];
                    var municipio = "";
                    var arr_ptos_gps_todos_municipios = [];

                    for (var i = 0; i < partes_municipios.length; i++) {

                        if (municipio.trim() != partes_municipios[i].nom_mun.trim()) {
                            municipios.push(partes_municipios[i]);
                        }

                        municipio = partes_municipios[i].nom_mun;
                    }

                    for (var i = 0; i < municipios.length; i++) {

                        //municipios[i].geometry = "";
                        var pto_gps_x_municipio = [];
                        for (var j = 0; j < partes_municipios.length; j++) {
                            if (municipios[i].nom_mun.trim() == partes_municipios[j].nom_mun.trim()) {


                                var puntos = partes_municipios[j].geometry.trim();
                                var coordenadas = puntos.split('),(');
                                var poligon = [];
                                var lonlat;
                                // obtener las coredenadas en areglo
                                for (var m = 0; m < coordenadas.length; m++) {
                                    coordenadas[m] = coordenadas[m].replace('(', '');
                                    coordenadas[m] = coordenadas[m].replace(')', '');
                                    lonlat = coordenadas[m].split(",");
                                    if (lonlat.length == 2) {
                                        if (lonlat[0].length > 16 & lonlat[1].length > 16) {
                                            pto_gps_x_municipio.push(new google.maps.LatLng(parseFloat(lonlat[0]), parseFloat(lonlat[1])));
                                        }

                                    }
                                }

                                // fin de algoritmo
                            }
                        }
                        arr_ptos_gps_todos_municipios.push(pto_gps_x_municipio);


                    }
                    construccionGeocercasColonias(municipios, arr_ptos_gps_todos_municipios);
                }
                else {
                    mensajeSweet("Ooops", "No se encontro la localidad con el criterio buscado", "info");
                    //alert("No se encontro la localidad con el criterio buscado");
                }
            },
            error: function (request, status, error) {
                mensajeSweet("Ooops", request.responseText, "info");
                //alert(request.responseText);
            }
        });

        // ordena las partes de las coordenadas


    }

    function construccionGeocercasColonias(geocercas, coordenadas_mun) {
        todasLasColonias = [];
        var notasAux = notas;
        var notasAux2 = notasAux;
        var csvRows = [['Estado', 'Municipio', 'Colonia', 'Ruta', 'Planta']];



        for (var i = 0; i < geocercas.length; i++) {

            // map.setCenter(point);
            // Contruccion del la geocerca
            var geopoligon = new google.maps.Polygon({
                paths: coordenadas_mun[i],// poligon,
                strokeColor: colorGeo,
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: colorGeo,
                //fillColor: geocercas[i].color_geo.trim(),
                fillOpacity: intencidad / 100,
                title: geocercas[i].nom_edo,
                html: geocercas[i].nom_mun
            });

            geopoligon.setMap(map);


            //todasLasColonias.push(geopoligon);
            for (var j = 0; j < notas.length; j++) {
                if (notas[j].gps_nvta.trim() != '') {
                    var putosgps = notas[j].gps_nvta.trim().split(' ');
                    var point1 = new google.maps.LatLng(parseFloat(putosgps[0].trim()), parseFloat(putosgps[1].trim()));
                    if (google.maps.geometry.poly.containsLocation(point1, geopoligon)) {
                        csvRows.push([geocercas[i].nom_edo, geocercas[i].nom_mun, geocercas[i].sett_name, notas[j].ruta_nvta, '\'' + notas[j].pla_nvta]);

                    }



                }
            }
            // notasAux = notasAux2;





        }// fin for


        var csvString = csvRows.join("%0A"); //join("%0A")

        var a = document.createElement('a');
        a.href = 'data:attachment/csv,' + csvString;
        a.target = '_blank';
        a.download = 'pointsInpoligon_.csv';
        document.body.appendChild(a);
        a.click();
        //alert("termino de construir las geocercas");


    }

    //------------------------------------------- funciones para la busquedas de negocios-----------------------------------
    function getNegocios(latlg)
    {
        quitarGeoCirculos();
        geoCircle = [];
        quitarNegocios();
        var cityCircle = new google.maps.Circle({
            strokeColor: "#FF0000",
            strokeOpacity: 0.9,
            strokeWeight: 2,
            fillColor: "#FF0000",
            fillOpacity: 0.0,           
            center: latlg,
            radius: $('#inpKmM').val() * km_m
        });
        cityCircle.setMap(map);
        geoCircle.push(cityCircle);

        // llamada a INUE

        var urlApiBusqueda = "https://www.inegi.org.mx/app/api/denue/v1/consulta/buscar/#condicion/#latitud,#longitud/#metros/#token";
        var token = '517589e1-18b8-468f-b21a-94f55976a5e2';       
        var coordenadas = latlg.toString().replace('(', '').replace(')', '').trim().split(',');
            var condicion = $('#condi').val();
            var longitud = coordenadas[1];
            var latitud = coordenadas[0];
            var metros = $('#inpKmM').val()*km_m;
            var urlApiBusquedaTmp = urlApiBusqueda.replace('#condicion', condicion);
            urlApiBusquedaTmp = urlApiBusquedaTmp.replace('#latitud', latitud);
            urlApiBusquedaTmp = urlApiBusquedaTmp.replace('#longitud', longitud);
            urlApiBusquedaTmp = urlApiBusquedaTmp.replace('#metros', metros);
            urlApiBusquedaTmp = urlApiBusquedaTmp.replace('#token', token);
            if (token.includes('AQUÍ')) {
                alert("Debes ingresar tu token en el archivo apiDenue.js");
            } else {
                $.getJSON(urlApiBusquedaTmp, function (json) {
                    negocios = json;
                    if (negocios.length > 0) {
                        for (var i = 0; i < negocios.length; i++)
                        {
                            var marker = new google.maps.Marker({
                                position: { lat: parseFloat(negocios[i].Latitud), lng: parseFloat(negocios[i].Longitud) },
                                map: map,
                                title: negocios[i].Nombre,
                                icon: "http://maps.gstatic.com/mapfiles/ridefinder-images/mm_20_green.png",
                                html:'<table>'+
                                    '<tr><td>CP: </td><td>'+negocios[i].CP+'</td></tr>'+
                                    '<tr><td>Calle:</td><td>'+negocios[i].Calle+'</td></tr>'+
                                    '<tr><td>CentroComercial:</td><td>'+negocios[i].CentroComercial+'</td></tr>'+
                                    '<tr><td>Clase_actividad:</td><td>'+negocios[i].Clase_actividad+'</td></tr>'+
                                    '<tr><td>Colonia: </td><td>'+negocios[i].Colonia+'</td></tr>'+
                                    '<tr><td>Correo_e:</td><td>'+negocios[i].Correo_e+'</td></tr>'+
                                    '<tr><td>Estrato: </td><td>'+negocios[i].Estrato+'</td></tr>'+
                                    '<tr><td>Id: </td><td>'+negocios[i].Id+'</td></tr>'+
                                    '<tr><td>Latitud: </td><td>'+negocios[i].Latitud+'</td></tr>'+
                                    '<tr><td>Longitud:</td><td>'+negocios[i].Longitud+'</td></tr>'+
                                    '<tr><td>Nombre: </td><td>'+negocios[i].Nombre+'</td></tr>'+
                                    '<tr><td>NumLocal: </td><td>'+negocios[i].NumLocal+'</td></tr>'+
                                    '<tr><td>Num_Exterior:</td><td>'+negocios[i].Num_Exterior+'</td></tr>'+
                                    '<tr><td>Num_Interior: </td><td>'+negocios[i].Num_Interior+'</td></tr>'+
                                    '<tr><td>Razon_social: </td><td>'+negocios[i].Razon_social+'</td></tr>'+
                                    '<tr><td>Sitio_internet:</td><td>'+negocios[i].Sitio_internet+'</td></tr>'+
                                    '<tr><td>Telefono: </td><td>'+negocios[i].Telefono+'</td></tr>'+
                                    '<tr><td>Tipo:</td><td>'+negocios[i].Tipo+'</td></tr>'+
                                    '<tr><td>TipoCentroComercial:</td><td>'+negocios[i].TipoCentroComercial+'</td></tr>'+
                                    '<tr><td>Tipo_vialidad: </td><td>'+negocios[i].Tipo_vialidad+'</td></tr>'+
                                    '<tr><td>Ubicacion: </td><td>'+negocios[i].Ubicacion+'</td></tr>'+
                                    '</table>',
                               // label: { color: '#ffffff', fontWeight: 'bold', fontSize: '14px', text: negocios[i].Nombre }
                            });
                            negociosEnMapa.push(marker);
                            
                            infoWindowG = new google.maps.InfoWindow();
                            google.maps.event.addListener(marker, 'click',  MuestraInfo);
                        }

                        function MuestraInfo(event) {
                            infoWindowG.setContent(this.html);
                            infoWindowG.setPosition(event.latLng);
                            infoWindowG.open(map);
                        }

                       


                    }
                });
            }
        
    }
    function quitarGeoCirculos()
    {
        for (var i = 0; i < geoCircle.length; i++) {
            geoCircle[i].setMap(null);
        }
    }
    function quitarNegocios() {
        for (var i = 0; i < negociosEnMapa.length; i++) {
            negociosEnMapa[i].setMap(null);
        }
        negociosEnMapa = [];
    }
    function KmM(check)
    {
        
        switch (document.getElementById(check.id).value) {
            case "Metros":
                km_m = 1;
                $("#inpKmM").prop('min', 0);
                $("#inpKmM").prop('max', 5000);
                $("#inpKmM").val(1);
               
                document.getElementById("checKilometros").checked = false;
                break;
            case "Kilometros":
                km_m = 1000;
                $("#inpKmM").prop('min', 0);
                $("#inpKmM").prop('max', 5);
                $("#inpKmM").val(1);
              
                document.getElementById("checMetros").checked = false;
                break;

        }
    }
    function limpiarNegocios() {
        quitarGeoCirculos();
        quitarNegocios();
        negocios = [];
    }
    function NegociosToExcel() {
        var ws_data = [];
        ws_data.push([
            'CP',
            'CALLE',
            'CENTRO COMERCIAL',
            "CLASE O ACTIVIDAD",
            "COLONIA",
            "CORREO",
            "ESTRATO",
            "COORDENADAS",
            "NOMBRE",
            "NUMERO DE LOCAL",
            "NUMERO EXTERIOR",
            "NUMERO INTERIOR",
            "RAZON SOCIAL",
            "PAG. INTERNET",
            "TELEFONO",
            "TIPO",
            "UBICACION"]);

        for (var i = 0; i < negocios.length ; i++) {
           
                                  
                                    
            
            ws_data.push([
                   negocios[i].CP,
                    negocios[i].Calle,
                    negocios[i].CentroComercial,
                    negocios[i].Clase_actividad,
                    negocios[i].Colonia,
                    negocios[i].Correo_e,
                    negocios[i].Estrato,                                 
                    negocios[i].Latitud+" "+negocios[i].Longitud,                                    
                    negocios[i].Nombre,
                    negocios[i].NumLocal,
                    negocios[i].Num_Exterior,
                    negocios[i].Num_Interior,
                    negocios[i].Razon_social,
                    negocios[i].Sitio_internet,
                    negocios[i].Telefono,
                    negocios[i].Tipo,                                    
                    negocios[i].Ubicacion
            ]);


        }



        var wb = XLSX.utils.book_new();
        wb.Props = {
            Title: "NEGOCIOS",
            Subject: "NEGOCIOS",
            Author: "GEN",
            CreatedDate: new Date(2017, 12, 19)
        };

        wb.SheetNames.push("NEGOCIOS");
        // var ws_data = [['hello', 'world']];
        var ws = XLSX.utils.aoa_to_sheet(ws_data);
        wb.Sheets["NEGOCIOS"] = ws;
        var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });
        function s2ab(s) {

            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;

        }

        saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), 'test.xlsx');

    }

    function negociosToPdf()
    {
        var div = document.getElementById("tableNegocioshtml");
        div.innerHTML = "";
       

       

       
        var vecNombres = [
 'id de establecimiento',
 'Nombre de la unidad econ&oacute;mica:',
 'Raz&oacute;n social:',
 'Nombre de la clase de actividad:',
 'Personal ocupado (estrato):',
 'Tipo de vialidad:',
 'Nombre de la vialidad:',
 'N&uacute;mero exterior o km:',
 'N&uacute;mero o letra interior:',
 'Nombre del asentamiento humano:',
 'C&oacute;digo postal:',
 'Entidad,Municipio,Localidad:',
 'N&uacute;mero de tel&eacute;fono:',
 'Correo electr&oacute;nico:',
 'Sitio en Internet:',
 'Tipo de unidad econ&oacute;mica:',
 'Latitud:',
 'Longitud:',
 'Centro comercial:',
 'Tipo de centro comercial:',
 'N&uacute;mero de local:'];

        for (var i = 0; i < negocios.length ; i++) {
            var codHtml = "";
            codHtml += '<table style="width:50%;">';
            codHtml += '<tr><th colspan="2">Establecimiento ' + (i + 1) + '</th></tr>';
            codHtml += '<tr ><td style="width:50%;" >' + vecNombres[0] + '</td><td style="width:50%;">' + negocios[i].Id + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[1] + '</td><td style="width:50%;">' + negocios[i].Nombre + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[2] + '</td><td style="width:50%;">' + negocios[i].Razon_social + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[3] + '</td><td style="width:50%;">' + negocios[i].Clase_actividad + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[4] + '</td><td style="width:50%;">' + negocios[i].Estrato + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[5] + '</td><td style="width:50%;">' + negocios[i].Tipo_vialidad + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[6] + '</td><td style="width:50%;">' + negocios[i].Calle + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[7] + '</td><td style="width:50%;">' + negocios[i].Num_Exterior + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[8] + '</td><td style="width:50%;">' + negocios[i].Num_Interior + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[9] + '</td><td style="width:50%;">' + negocios[i].Colonia + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[10] + '</td><td style="width:50%;">' + negocios[i].CP + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[11] + '</td><td style="width:50%;">' + negocios[i].Ubicacion + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[12] + '</td><td style="width:50%;">' + negocios[i].Telefono + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[13] + '</td><td style="width:50%;">' + negocios[i].Correo_e + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[14] + '</td><td style="width:50%;">' + negocios[i].Sitio_internet + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[15] + '</td><td style="width:50%;">' + negocios[i].Tipo + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[16] + '</td><td style="width:50%;">' + negocios[i].Latitud + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[17] + '</td><td style="width:50%;">' + negocios[i].Longitud + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[18] + '</td><td style="width:50%;">' + negocios[i].CentroComercial + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[19] + '</td><td style="width:50%;">' + negocios[i].TipoCentroComercial + '</td></tr>' +
            '<tr ><td style="width:50%;" >' + vecNombres[20] + '</td><td style="width:50%;">' + negocios[i].NumLocal + '</td></tr>'

            codHtml += '<tr><td></td></tr></table><br><br>';
            div.innerHTML += codHtml;
        }
      
        imprimirDIV("tableNegocioshtml");

    }
</script>


<script type="text/javascript">
    var areYouReallySure = false;
    function salirModulo() {
        localStorage.removeItem('Act Pedidos');
    }
    window.onbeforeunload = salirModulo;


</script>
























